//Generated by WriteToUsemodelquery_ts - useModelQuery.ts
import {
  LockedDeckFormUpdatePayload,
  LockedDeckModel,
} from "@/interfaces/LockedDeckInterfaces";
import axiosClient from "@/utils/api";
import { PRIMARY_KEY } from "@/utils/constants/LockedDeckConstants";
import { UseQueryResult, useMutation, useQuery } from "@tanstack/react-query";

const BASE_URL = "locked-decks";

type IndexAndID = {
  index: number;
  id: number | string;
};

type Response = {
  id?: number | string;
  slug?: string;
  //Generated by GetAllRelatedIndexAndID
  LockedDeckCards: IndexAndID[];
};

const updateLockedDeck = async (
  payload: LockedDeckFormUpdatePayload,
  id: string | number
) => {
  const { data } = await axiosClient({
    url: BASE_URL + "/" + id,
    method: "put",
    data: payload,
  });

  return data as Response;
};

const addLockedDeck = async (payload: LockedDeckFormUpdatePayload) => {
  const { data } = await axiosClient({
    url: BASE_URL,
    method: "post",
    data: payload,
  });

  return data as Response;
};

export const getLockedDeck = async ({
  queryKey,
}: {
  queryKey: [string, string];
}) => {
  const { data } = await axiosClient.get<LockedDeckModel>(
    `${BASE_URL}/${queryKey[1]}`
  );
  return data;
};

const addOrUpdateLockedDeck = (payload: LockedDeckFormUpdatePayload) => {
  if (payload[PRIMARY_KEY]) {
    return updateLockedDeck(payload, payload[PRIMARY_KEY]);
  } else {
    return addLockedDeck(payload);
  }
};

export const useLockedDeckQuery = (
  slug: string,
  options?: Parameters<typeof useQuery>[2]
) => {
  const lockedDeckMutation = useMutation(addOrUpdateLockedDeck);

  const lockedDeckQuery = useQuery(
    ["lockedDeck", slug],
    getLockedDeck,
    //@ts-ignore
    options
  ) as UseQueryResult<LockedDeckModel, any>;

  return { lockedDeckMutation, lockedDeckQuery };
};
