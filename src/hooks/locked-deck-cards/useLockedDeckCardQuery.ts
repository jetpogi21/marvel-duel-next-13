//Generated by WriteToUsemodelquery_ts - useModelQuery.ts
import { LockedDeckCardFormUpdatePayload, LockedDeckCardModel } from "@/interfaces/LockedDeckCardInterfaces";
import axiosClient from "@/utils/api";
import { PRIMARY_KEY } from "@/utils/constants/LockedDeckCardConstants";
import { UseQueryResult, useMutation, useQuery } from "@tanstack/react-query";

const BASE_URL = "locked-deck-cards";

type IndexAndID = {
  index: number;
  id: number | string;
};

type Response = {
  id: number | string;
  slug?: string;
  
  
};

const updateLockedDeckCard = async (
  payload: LockedDeckCardFormUpdatePayload,
  id: string | number
) => {
  const { data } = await axiosClient({
    url: BASE_URL + "/" + id,
    method: "put",
    data: payload,
  });

  return data as Response;
};

const addLockedDeckCard = async (payload: LockedDeckCardFormUpdatePayload) => {
  const { data } = await axiosClient({
    url: BASE_URL,
    method: "post",
    data: payload,
  });

  return data as Response;
};

export const getLockedDeckCard = async ({ queryKey }: { queryKey: [string, string] }) => {
  const { data } = await axiosClient.get<LockedDeckCardModel>(
    `${BASE_URL}/${queryKey[1]}`
  );
  return data;
};

const addOrUpdateLockedDeckCard = (payload: LockedDeckCardFormUpdatePayload) => {
  if (payload[PRIMARY_KEY]) {
    return updateLockedDeckCard(payload, payload[PRIMARY_KEY]);
  } else {
    return addLockedDeckCard(payload);
  }
};

export const useLockedDeckCardQuery = (
  slug: string,
  options?: Parameters<typeof useQuery>[2]
) => {
  const lockedDeckCardMutation = useMutation(addOrUpdateLockedDeckCard);

  const lockedDeckCardQuery = useQuery(
    ["lockedDeckCard", slug],
    getLockedDeckCard,
    //@ts-ignore
    options
  ) as UseQueryResult<LockedDeckCardModel, any>;

  return { lockedDeckCardMutation, lockedDeckCardQuery };
};
