//Generated by WriteToModeltable_tsx - ModelTable.tsx
"use client";
//Generated by GeneratePageFile
import React, { useEffect, useState } from "react";
import { getAxiosParams } from "@/utils/utilities";
import { useCardUnityStore } from "@/hooks/card-unities/useCardUnityStore";
import {
  CardUnityFormikInitialValues,
  CardUnitySearchParams,
  CardUnityUpdatePayload,
  GetCardUnitiesResponse,
  CardUnityDeletePayload,
} from "@/interfaces/CardUnityInterfaces";
import axiosClient from "@/utils/api";
import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQueryClient,
} from "@tanstack/react-query";
import { DEFAULT_LIMIT } from "@/utils/constants";
import { useURL } from "@/hooks/useURL";
import { Formik } from "formik";
import { CardUnityArraySchema } from "@/schema/CardUnitySchema";
import { toast } from "@/hooks/use-toast";
import {
  DEFAULT_FILTERS,
  DEFAULT_FORM_VALUE,
  DEFAULT_SORT_BY,
} from "@/utils/constants/CardUnityConstants";
import { useCardUnityDeleteDialog } from "@/hooks/card-unities/useCardUnityDeleteDialog";
import CardUnityFormArray from "@/components/card-unities/CardUnityFormArray";

const CardUnityTable: React.FC = () => {
  const { query } = useURL<CardUnitySearchParams>();
  const queryClient = useQueryClient();

  ///Local States
  const [mounted, setMounted] = useState(false);

  //SearchParams Variables
  //Generated by GetAllSearchParamsBySeqModel
  const q = query["q"] || "";
  const card = query["card"] || "";
  const sort = query["sort"] || DEFAULT_SORT_BY;
  const limit = query["limit"] || DEFAULT_LIMIT;

  //Page constants
  const DEFAULT_CARDUNITY = DEFAULT_FORM_VALUE;

  //Store Variables
  const {
    recordCount,
    setRecordCount,
    lastPage,
    setLastPage,
    setPage,
    fetchCount,
    setFetchCount,
    resetRowSelection,
    currentData,
    setCurrentData,
    setIsUpdating,
  } = useCardUnityStore();

  const [setRecordsToDelete, setIsDialogLoading, setMutate] =
    useCardUnityDeleteDialog((state) => [
      state.setRecordsToDelete,
      state.setIsDialogLoading,
      state.setMutate,
    ]);

  //API Functions
  const getCardUnities = async ({ pageParam = "" }) => {
    //First argument is the queries from the form, second one is so that the queries can be turned into the desired shape while the defaultFilters will be the searchParams not included from the from
    const axiosParams = getAxiosParams(
      {
        //Generated by GetAllFilterQueryNameBySeqModel
        q,
        card,
      },
      DEFAULT_FILTERS,
      {
        cursor: pageParam,
        limit,
        sort,
        fetchCount: fetchCount.toString(),
      }
    ) as Partial<CardUnitySearchParams>;

    const { data } = await axiosClient.get<GetCardUnitiesResponse>(
      `card-unities`,
      {
        params: axiosParams,
      }
    );

    return data;
  };

  const updateCardUnities = async (payload: CardUnityUpdatePayload) => {
    const { data } = (await axiosClient({
      url: "card-unities",
      method: "post",
      data: payload,
    })) as { data: { recordsCreated: number } };

    return data;
  };

  const deleteCardUnities = async (payload: CardUnityDeletePayload) => {
    const { data } = (await axiosClient({
      url: "card-unities",
      method: "delete",
      data: payload,
    })) as { data: { recordsDeleted: number } };

    return data;
  };

  //API Functions end here

  //Tanstacks
  const { refetch } = useInfiniteQuery(["cardUnities"], getCardUnities, {
    getNextPageParam: (lastPage) => lastPage.cursor ?? undefined,
    onSuccess: (data) => {
      const dataPageLength = data.pages.length;
      const dataLastPageRowCount = data.pages[dataPageLength - 1].count;

      if (dataPageLength > lastPage) {
        setLastPage(dataPageLength);
        setPage(dataPageLength);
        setCurrentData([
          ...data.pages[dataPageLength - 1].rows.map((item, index) => ({
            ...item,
            index,
            touched: false,
          })),
          {
            ...DEFAULT_CARDUNITY,
            index: data.pages[dataPageLength - 1].rows.length,
          },
        ]);
      } else {
        setLastPage(1);
        setPage(1);
        setCurrentData([
          ...data.pages[0].rows.map((item, index) => ({
            ...item,
            index,
            touched: false,
          })),
          {
            ...DEFAULT_CARDUNITY,
            index: data.pages[dataPageLength - 1].rows.length,
          },
        ]);
      }

      if (dataLastPageRowCount) {
        setFetchCount(false);
        setRecordCount(dataLastPageRowCount);
      }
    },
    enabled: mounted,
    staleTime: Infinity,
  });

  //Generated by GetMutationSnippets
  type MutationData = { recordsCreated?: number; recordsDeleted?: number };
  const handleMutation = (
    mutationFunction: (payload: any) => Promise<MutationData>,
    successCallback: (data: MutationData) => string,
    updateRecordCountCallback: (
      recordCount: number,
      data: MutationData
    ) => number
  ) => {
    const { mutate } = useMutation(mutationFunction, {
      onMutate: () => {
        setIsDialogLoading(true);
        setIsUpdating(true);
      },
      onSuccess: (data) => {
        toast({
          description: successCallback(data),
          variant: "success",
          duration: 2000,
        });
        resetRowSelection();
        setRecordCount(updateRecordCountCallback(recordCount, data));
        sliceQueryDataAndRefetch(0);
      },
      onError: (error) => {
        const responseText =
          //@ts-ignore
          error?.response?.statusText || "Something went wrong with the app";
        toast({
          description: responseText,
          variant: "destructive",
          duration: 2000,
        });
      },
      onSettled: () => {
        setIsDialogLoading(false);
        setIsUpdating(false);
        setRecordsToDelete([]);
      },
    });

    return mutate;
  };

  // Usage for deleteCardUnityMutation
  const deleteCardUnityMutation = handleMutation(
    deleteCardUnities,
    (data) => {
      return "Card Unity(s) deleted successfully";
    },
    (recordCount, data) => {
      return recordCount - (data.recordsDeleted || 0);
    }
  );

  // Usage for updateCardUnities
  const updateCardUnitiesMutation = handleMutation(
    updateCardUnities,
    (data) => {
      return "Card Unity list updated successfully";
    },
    (recordCount, data) => {
      return (
        recordCount + (data.recordsCreated || 0) - (data.recordsDeleted || 0)
      );
    }
  );

  //Transformations
  const sliceQueryDataAndRefetch = (idx: number) => {
    queryClient.setQueryData(
      ["cardUnities"],
      (data: InfiniteData<GetCardUnitiesResponse> | undefined) => {
        return data
          ? {
              pages: data.pages.slice(0, idx + 1),
              pageParams: data.pageParams.slice(0, idx + 1),
            }
          : undefined;
      }
    );
    refetch();
  };

  //Client Actions
  const handleSubmit = async (values: CardUnityFormikInitialValues) => {
    //The reference is the index of the row
    const CardUnitiesToBeSubmitted = values.CardUnities.filter(
      (item) => item.touched
    );

    if (CardUnitiesToBeSubmitted.length > 0) {
      const payload: CardUnityUpdatePayload = {
        CardUnities: CardUnitiesToBeSubmitted,
      };

      updateCardUnitiesMutation(payload);
    }
  };

  useEffect(() => {
    setMounted(true);
    setMutate(deleteCardUnityMutation);
  }, []);

  useEffect(() => {
    if (mounted) {
      sliceQueryDataAndRefetch(0);
    }
  }, [
    limit,
    sort, //Generated by GetAllFilterQueryNameBySeqModel
    q,
    card,
  ]);

  return (
    <Formik
      initialValues={{
        CardUnities: currentData,
      }}
      enableReinitialize={true}
      onSubmit={handleSubmit}
      validationSchema={CardUnityArraySchema}
      validateOnChange={false}
    >
      {(formik) => <CardUnityFormArray formik={formik} />}
    </Formik>
  );
};

export default CardUnityTable;
