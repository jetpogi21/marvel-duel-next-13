//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  CardUnityFormFormikInitialValues,
  CardUnityModel,
  CardUnitySearchParams,
} from "@/interfaces/CardUnityInterfaces";
import { Form, Formik, FormikHelpers, FormikProps } from "formik";
import React, { MouseEventHandler, useEffect, useRef, useState } from "react";
import {
  DEFAULT_FORM_VALUE,
  CONTROL_OPTIONS,
  PRIMARY_KEY,
} from "@/utils/constants/CardUnityConstants";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useCardUnityStore } from "@/hooks/cardUnities/useCardUnityStore";
import { toast } from "@/hooks/use-toast";
import { useCardUnityQuery } from "@/hooks/cardUnities/useCardUnityQuery";
import { convertArrayItemsToStrings } from "@/utils/utils";
import { CardUnitySchema } from "@/schema/CardUnitySchema";
import { Trash } from "lucide-react";
import { useCardUnityDeleteDialog } from "@/hooks/card-unities/useCardUnityDeleteDialog";
import { CardUnityDeleteDialog } from "@/components/card-unities/CardUnityDeleteDialog";
//Generated by GetAllModelFormRelatedConstantsImport
//Generated by GetModelFormRelatedConstantsImport - GetAllModelFormRelatedConstantsImport
import {
  COLUMNS as CARDUNITYCARD_COLUMNS,
  DEFAULT_FORM_VALUE as DEFAULT_CARDUNITYCARD_FORM_VALUE,
  DEFAULT_SORT_BY as DEFAULT_CARDUNITYCARD_SORT_BY,
} from "@/utils/constants/CardUnityCardConstants";
import { useCardUnityCardStore } from "@/hooks/card-unity-cards/useCardUnityCardStore";
import CardUnityCardSubform from "@/components/card-unities/CardUnityCardSubform";
//Generated by GetAllModelFormRequiredListImport
//Generated by GetModelFormRequiredListImport - GetModelFormRequiredListImport
import useCardList from "@/hooks/cards/useCardList";

interface CardUnityFormProps {
  data: CardUnityModel | null;
  slug: string;
}

const CardUnityForm: React.FC<CardUnityFormProps> = (prop) => {
  const { slug } = prop;
  const { router, query, pathid } = useURL<CardUnitySearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);
  const [recordName, setRecordName] = useState(
    prop.data ? prop.data.cardCompositions : "New CardUnity"
  );

  const ref = useRef<any>(null);

  //Zustand variables
  const { isUpdating, setIsUpdating } = useCardUnityStore((state) => ({
    isUpdating: state.isUpdating,
    setIsUpdating: state.setIsUpdating,
  }));

  const { setRecordsToDelete } = useCardUnityDeleteDialog((state) => ({
    setRecordsToDelete: state.setRecordsToDelete,
  }));

  //Generated by GetAllRelatedModelSortFromStore
  const { sort: cardUnityCardSort } = useCardUnityCardStore((state) => ({
    sort: state.sort,
  }));

  //Tanstack queries

  const { cardUnityMutation, cardUnityQuery } = useCardUnityQuery(slug, {
    enabled: mounted && slug !== "new",
    initialData: prop.data,
  });

  const cardUnity = cardUnityQuery.data;

  //The related mode is generated by GetAllRelatedModelEmptyArray
  const initialValues: CardUnityFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,

    //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
    CardUnityCards: [],
  };

  if (cardUnity) {
    for (const key in initialValues) {
      if (cardUnity.hasOwnProperty(key) && initialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = cardUnity[key] === null ? "" : cardUnity[key];
      }
    }

    //Generated by GetAllRelatedModelMapToInitialValue
    //Generated by GetRelatedModelMapToInitialValue - RelatedModelMapToInitialValue
    initialValues.CardUnityCards = cardUnity.CardUnityCards.map(
      (item, index) => ({
        ...item,
        touched: false,
        index,
      })
    );
  }

  //Generated by GetAllRelatedModelSortInitialValue
  //Generated by GetRelatedModelSortInitialValue - GetRelatedModelSortInitialValue
  //Sort the CardUnityCards array value
  initialValues.CardUnityCards.sort((a, b) => {
    const desc = DEFAULT_CARDUNITYCARD_SORT_BY.includes("-");
    const field = desc
      ? DEFAULT_CARDUNITYCARD_SORT_BY.substring(1)
      : DEFAULT_CARDUNITYCARD_SORT_BY;
    return sortData(a, b, desc, field, CARDUNITYCARD_COLUMNS);
  });

  initialValues.CardUnityCards.push({
    ...DEFAULT_CARDUNITYCARD_FORM_VALUE,
    index: initialValues.CardUnityCards.length + 1,
    CardUnityId: cardUnity ? cardUnity.id : heroes ? heroes[0].id : "",
  });

  const handleFocus = () => {
    ref && ref.current.focus();
  };

  const handleFormikSubmit = (
    values: CardUnityFormFormikInitialValues,
    formik: FormikHelpers<CardUnityFormFormikInitialValues>
  ) => {
    const payload = {
      ...values,
      //Generated by GetAllRelatedPayloadAssignment
      //Generated by GetRelatedPayloadAssignment - GetRelatedPayloadAssignment
      CardUnityCards: values.CardUnityCards.map((item, index) => ({
        ...item,
        index,
      })).filter((item) => item.touched),
    };

    cardUnityMutation.mutateAsync(payload).then((data) => {
      //@ts-ignore
      const addNew: boolean = values.addNew;
      if (addNew) {
        formik.resetForm({
          values: {
            ...DEFAULT_FORM_VALUE,
            //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
            CardCardKeywords: [],
          },
        });
        window.history.pushState({}, "", `${window.location.origin}/cards/new`);
        setRecordName("New Card");
        setOriginalCardCardKeywords([]);
        handleFocus();
      } else {
        if (data.id) {
          formik.setFieldValue("id", data.id);
        }

        if (data.slug) {
          window.history.pushState(
            {},
            "",
            `${window.location.origin}/cards/${data.slug}`
          );
        }

        setRecordName(values.name);
      }

      toast({
        description: "CardUnity list updated successfully",
        variant: "success",
        duration: 2000,
      });
    });
  };

  const renderFormik = (
    formik: FormikProps<CardUnityFormFormikInitialValues>
  ) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col gap-8"
        autoComplete="off"
      >
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="cardCompositions"
          type="Text"
          label="Card Compositions"
          containerClassNames={["w-full"]}
          inputRef={ref}
          setFocusOnLoad={true}
        />
        {/* Generated by GetAllRelatedSubforms */}
        {/* Generated by GetRelatedSubform - GetRelatedSubform */}
        <CardUnityCardSubform formik={formik} />

        <div className="flex gap-2">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", true);
              handleSubmitClick(e);
            }}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", false);
              handleSubmitClick(e);
            }}
          >
            Save
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"ghost"}
            onClick={(e) => {
              router.back();
            }}
          >
            Cancel
          </Button>
          {slug !== "new" && (
            <Button
              type="button"
              size={"sm"}
              variant={"destructive"}
              onClick={(e) => {
                setRecordsToDelete([formik.values[PRIMARY_KEY].toString()]);
              }}
              className={"ml-auto"}
            >
              <Trash className="w-4 h-4 mr-2" />
              Delete
            </Button>
          )}
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
    handleFocus();
  }, []);

  return (
    <>
      <Breadcrumb
        links={[
          { name: "CardUnities", href: "/card-unities" },
          { name: recordName, href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
        validationSchema={CardUnitySchema}
      >
        {renderFormik}
      </Formik>
      <CardUnityDeleteDialog
        onSuccess={() => {
          toast({
            description: "Card Unity successfully deleted.",
            variant: "success",
            duration: 4000,
          });
          router.back();
        }}
      />
    </>
  );
};

export default CardUnityForm;
