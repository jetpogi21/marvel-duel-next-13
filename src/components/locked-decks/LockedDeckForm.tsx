//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  LockedDeckFormFormikInitialValues,
  LockedDeckModel,
  LockedDeckSearchParams,
} from "@/interfaces/LockedDeckInterfaces";
import {
  Form,
  Formik,
  FormikHelpers,
  FormikProps,
  useFormikContext,
} from "formik";
import React, { MouseEventHandler, useEffect, useRef, useState } from "react";
import { BasicModel } from "@/interfaces/GeneralInterfaces";
import {
  DEFAULT_FORM_VALUE,
  CONTROL_OPTIONS,
  PRIMARY_KEY,
} from "@/utils/constants/LockedDeckConstants";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useLockedDeckStore } from "@/hooks/locked-decks/useLockedDeckStore";
import { toast } from "@/hooks/use-toast";
import { useLockedDeckQuery } from "@/hooks/locked-decks/useLockedDeckQuery";
import { convertArrayItemsToStrings } from "@/utils/utils";
import { LockedDeckSchema } from "@/schema/LockedDeckSchema";
import { Trash } from "lucide-react";
import { useLockedDeckDeleteDialog } from "@/hooks/locked-decks/useLockedDeckDeleteDialog";
import { LockedDeckDeleteDialog } from "@/components/locked-decks/LockedDeckDeleteDialog";
//Generated by GetAllModelFormRelatedConstantsImport
//Generated by GetModelFormRelatedConstantsImport - GetAllModelFormRelatedConstantsImport
import {
  PRIMARY_KEY as LOCKEDDECKCARD_PRIMARYKEY,
  COLUMNS as LOCKEDDECKCARD_COLUMNS,
  DEFAULT_FORM_VALUE as DEFAULT_LOCKEDDECKCARD_FORM_VALUE,
  DEFAULT_SORT_BY as DEFAULT_LOCKEDDECKCARD_SORT_BY,
} from "@/utils/constants/LockedDeckCardConstants";
import { useLockedDeckCardStore } from "@/hooks/locked-deck-cards/useLockedDeckCardStore";
import LockedDeckCardSubform from "@/components/locked-decks/LockedDeckCardSubform";
//Generated by GetAllModelFormRequiredListImport
//Generated by GetModelFormRequiredListImport - GetModelFormRequiredListImport
import useCardList from "@/hooks/cards/useCardList";

interface LockedDeckFormProps {
  data: LockedDeckModel | null;
  slug: string;
}

const LockedDeckForm: React.FC<LockedDeckFormProps> = (prop) => {
  const { slug } = prop;
  const { router, query, pathname } = useURL<LockedDeckSearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);
  const [recordName, setRecordName] = useState(
    prop.data ? prop.data.name : "New Locked Deck"
  );

  const ref = useRef<any>(null);

  //Zustand variables
  const { isUpdating, setIsUpdating, hasUpdate, setHasUpdate } =
    useLockedDeckStore((state) => ({
      isUpdating: state.isUpdating,
      setIsUpdating: state.setIsUpdating,
      hasUpdate: state.hasUpdate,
      setHasUpdate: state.setHasUpdate,
    }));

  const { setRecordsToDelete } = useLockedDeckDeleteDialog((state) => ({
    setRecordsToDelete: state.setRecordsToDelete,
  }));

  //Generated by GetAllRelatedModelSortFromStore
  const { sort: lockedDeckCardSort } = useLockedDeckCardStore((state) => ({
    sort: state.sort,
  }));

  //Tanstack queries

  //Generated by GetAllRelatedListFromRightRelatedModel

  const { lockedDeckMutation, lockedDeckQuery } = useLockedDeckQuery(slug, {
    enabled: mounted && slug !== "new",
    initialData: prop.data,
  });

  const lockedDeck = lockedDeckQuery.data;

  const initialValues: LockedDeckFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,

    //Generated by GetAllRelatedModelEmptyArray
    //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
    LockedDeckCards: [{ ...DEFAULT_LOCKEDDECKCARD_FORM_VALUE, index: 0 }],
  };

  if (lockedDeck) {
    for (const key in initialValues) {
      if (lockedDeck.hasOwnProperty(key) && initialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = lockedDeck[key] === null ? "" : lockedDeck[key];
      }
    }

    //Generated by GetAllRelatedModelMapToInitialValue
    //Generated by GetRelatedModelMapToInitialValue - RelatedModelMapToInitialValue
    initialValues.LockedDeckCards = lockedDeck.LockedDeckCards.map(
      (item, index) => ({
        ...item,
        touched: false,
        index,
      })
    );
  }

  //Generated by GetAllRelatedModelSortInitialValue
  //Generated by GetRelatedModelSortInitialValue - GetRelatedModelSortInitialValue
  //Sort the LockedDeckCards array value
  initialValues.LockedDeckCards.sort((a, b) => {
    const desc = DEFAULT_LOCKEDDECKCARD_SORT_BY.includes("-");
    const field = desc
      ? DEFAULT_LOCKEDDECKCARD_SORT_BY.substring(1)
      : DEFAULT_LOCKEDDECKCARD_SORT_BY;
    return sortData(
      a,
      b,
      desc,
      field,
      LOCKEDDECKCARD_COLUMNS,
      LOCKEDDECKCARD_PRIMARYKEY
    );
  });

  initialValues.LockedDeckCards.push({
    ...DEFAULT_LOCKEDDECKCARD_FORM_VALUE,
    index: initialValues.LockedDeckCards.length + 1,
    lockedDeckId: lockedDeck ? lockedDeck.id : "",
  });

  const handleFocus = () => {
    ref && ref.current && ref.current.focus();
  };

  const handleHasUdpate = () => {
    setHasUpdate(true);
  };

  const handleFormikSubmit = (
    values: LockedDeckFormFormikInitialValues,
    formik: FormikHelpers<LockedDeckFormFormikInitialValues>
  ) => {
    //@ts-ignore
    const addNew: boolean = values.addNew;

    const goToNewRecord = () => {
      formik.setValues({
        ...DEFAULT_FORM_VALUE,

        //Generated by GetAllRelatedModelEmptyArray
        //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
        LockedDeckCards: [{ ...DEFAULT_LOCKEDDECKCARD_FORM_VALUE, index: 0 }],
      });
      window.history.pushState(
        {},
        "",
        `${window.location.origin}/locked-decks/new`
      );
      setRecordName("New Locked Deck");

      handleFocus();
    };

    if (hasUpdate) {
      const payload = {
        ...values,
        //Generated by GetAllRelatedPayloadAssignment
        //Generated by GetRelatedPayloadAssignment - GetRelatedPayloadAssignment
        LockedDeckCards: values.LockedDeckCards.map((item, index) => ({
          ...item,
          index,
        })).filter((item) => item.touched),
      };

      lockedDeckMutation
        .mutateAsync(payload)
        .then((data) => {
          if (addNew) {
            goToNewRecord();
          } else {
            if (data.id) {
              formik.setFieldValue("id", data.id);
            }

            if (data.slug) {
              window.history.pushState(
                {},
                "",
                `${window.location.origin}/locked-decks/${data.slug}`
              );
            }

            setRecordName(values.name);

            //Generated by GetAllReplaceEmptyRelatedModel
            //Generated by GetReplaceEmptyRelatedModel - GetReplaceEmptyRelatedModel
            //Replace the id fields of the indexes from the LockedDeckCards
            const newLockedDeckCards = values.LockedDeckCards.map(
              (item, index) => ({
                ...item,
                id:
                  data.LockedDeckCards.find((item) => item.index === index)
                    ?.id || item.id,
              })
            ).sort((a, b) => {
              const desc = lockedDeckCardSort.includes("-");
              const field = desc
                ? lockedDeckCardSort.substring(1)
                : lockedDeckCardSort;

              return sortData(a, b, desc, field, LOCKEDDECKCARD_COLUMNS);
            });

            formik.setFieldValue("LockedDeckCards", newLockedDeckCards);
          }

          toast({
            description: "Locked Deck list updated successfully",
            variant: "success",
            duration: 2000,
          });
        })
        .catch((err) => console.log(err));
    } else {
      if (addNew) {
        goToNewRecord();
      }
    }
  };

  const renderFormik = (
    formik: FormikProps<LockedDeckFormFormikInitialValues>
  ) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col flex-1 h-full gap-4"
        autoComplete="off"
      >
        {/* Generated by GetAllFormikControls */}
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="name"
          type="Text"
          label="Name"
          containerClassNames={["w-full"]}
          ref={ref}
          setFocusOnLoad={true}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetAllRelatedSubforms */}
        {/* Generated by GetRelatedSubform - GetRelatedSubform */}
        <LockedDeckCardSubform formik={formik} />

        <div className="flex gap-2 mt-auto">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", true);
              handleSubmitClick(e);
            }}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", false);
              handleSubmitClick(e);
            }}
          >
            Save
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"ghost"}
            onClick={(e) => {
              router.back();
            }}
          >
            Cancel
          </Button>
          {slug !== "new" && (
            <Button
              type="button"
              size={"sm"}
              variant={"destructive"}
              onClick={(e) => {
                setRecordsToDelete([formik.values[PRIMARY_KEY].toString()]);
              }}
              className={"ml-auto"}
            >
              <Trash className="w-4 h-4 mr-2" />
              Delete
            </Button>
          )}
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
    handleFocus();
  }, []);

  return (
    <>
      <Breadcrumb
        links={[
          { name: "Locked Decks", href: "/locked-decks" },
          { name: recordName, href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
        validationSchema={LockedDeckSchema}
      >
        {renderFormik}
      </Formik>
      <LockedDeckDeleteDialog
        onSuccess={() => {
          toast({
            description: "Locked Deck successfully deleted.",
            variant: "success",
            duration: 4000,
          });
          router.back();
        }}
      />
    </>
  );
};

export default LockedDeckForm;
