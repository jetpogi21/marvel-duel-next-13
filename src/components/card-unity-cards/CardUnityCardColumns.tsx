//Generated by WriteToModelcolumns_tsx - ModelColumns.tsx
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Checkbox } from "@/components/ui/Checkbox";
import { DataTableColumnHeader } from "@/components/ui/DataTable/DataTableColumnHeader";
import { EditableTableCell } from "@/components/ui/DataTable/EditableTableCell";
import { CardUnityCardFormikShape } from "@/interfaces/CardUnityCardInterfaces";
import { DeleteRowColumn } from "@/components/ui/DataTable/DeleteRowColumn";

//Generated by GetAllRightModelListImportForColumn
//Generated by GetRightModelListImportForColumn - GetRightModelListImportForColumn
import useCardList from "@/hooks/cards/useCardList";

export const useCardUnityCardColumns = () => {
  //Generated by GetAllUseRightModelListForColumn
  //Generated by GetUseRightModelListForColumn - GetUseRightModelListForColumn
  const { data: cardList } = useCardList();
  const CardUnityCardColumns: ColumnDef<CardUnityCardFormikShape>[] = [
    {
      id: "select",
      header: ({ table }) => {
        const toggleSelectAllRow = table.options.meta?.toggleSelectAllRow;
        return (
          <div className="flex justify-center w-full">
            <Checkbox
              tabIndex={-1}
              checked={table.getIsAllPageRowsSelected()}
              onCheckedChange={() => {
                toggleSelectAllRow && toggleSelectAllRow();
              }}
              aria-label="Select all"
            />
          </div>
        );
      },
      cell: ({ row, table }) => {
        const toggleRow = table.options.meta?.toggleRow;
        return (
          <div className="flex justify-center">
            <Checkbox
              tabIndex={-1}
              checked={row.getIsSelected()}
              onCheckedChange={() => {
                toggleRow && toggleRow(row.index);
              }}
              aria-label="Select row"
            />
          </div>
        );
      },
    },
    //Generated by GetAllTableFieldCellInputBySeqModel
    //Generated by GetTableFieldCellInput - Editable Table Cell
    {
      accessorKey: "description",
      header: ({ column }) => (
        <DataTableColumnHeader
          column={column}
          title="Description"
        />
      ),
      cell: (cell) => {
        return cell.table.options.meta?.editable ? (
          <EditableTableCell {...cell} />
        ) : (
          //@ts-ignore
          cell.getValue()
        );
      },
      meta: {
        type: "Textarea",
        label: "Description",
      },
      enableSorting: false,
    }, //Generated by GetTableFieldCellInput - Editable Table Cell
    {
      accessorKey: "CardUnityId",
      header: ({ column }) => (
        <DataTableColumnHeader
          column={column}
          title="Card Unity"
        />
      ),
      cell: (cell) => {
        return cell.table.options.meta?.editable ? (
          <EditableTableCell {...cell} />
        ) : (
          //@ts-ignore
          cell.row.original.CardUnity.cardCompositions
        );
      },
      meta: {
        type: "ComboBox",
        label: "Card Unity",
      },
      enableSorting: true,
    }, //Generated by GetTableFieldCellInput - Editable Table Cell
    {
      accessorKey: "CardId",
      header: ({ column }) => (
        <DataTableColumnHeader
          column={column}
          title="Card"
        />
      ),
      cell: (cell) => {
        return cell.table.options.meta?.editable ? (
          <EditableTableCell {...cell} />
        ) : (
          //@ts-ignore
          cell.row.original.Card.name
        );
      },
      meta: {
        type: "ComboBox",
        label: "Card",
        width: 200, //Generated by Get_listNameFromRelationship
        options: "cardList",
      },
      enableSorting: true,
    },
    {
      id: "actions",
      //cell component generated by GetActionCell
      cell: (cell) => <DeleteRowColumn {...cell} />,
    },
  ];

  return CardUnityCardColumns;
};
