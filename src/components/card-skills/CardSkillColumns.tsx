//Generated by WriteToModelcolumns_tsx
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Checkbox } from "@/components/ui/Checkbox";
import { DataTableColumnHeader } from "@/components/ui/DataTable/DataTableColumnHeader";
import { EditableTableCell } from "@/components/ui/DataTable/EditableTableCell";
import { CardSkillFormikShape } from "@/interfaces/CardSkillInterfaces";
import { DeleteRowColumn } from "@/components/ui/DataTable/DeleteRowColumn";

export const CardSkillColumns: ColumnDef<CardSkillFormikShape>[] = [
  {
    id: "select",
    header: ({ table }) => {
      const toggleSelectAllRow = table.options.meta?.toggleSelectAllRow;
      return (
<div className="flex justify-center">
        <Checkbox
          tabIndex={-1}
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={() => {
            toggleSelectAllRow && toggleSelectAllRow();
          }}
          aria-label="Select all"
        />
</div>
      );
    },
    cell: ({ row, table }) => {
      const toggleRow = table.options.meta?.toggleRow;
      return (
<div className="flex justify-center">
        <Checkbox
          tabIndex={-1}
          checked={row.getIsSelected()}
          onCheckedChange={() => {
            toggleRow && toggleRow(row.index);
          }}
          aria-label="Select row"
        />
</div>
      );
    },
  },
  //Generated by GetAllTableFieldCellInputBySeqModel
//Generated by GetTableFieldCellInput
{
  accessorKey: "name",
  header: ({ column }) => (
    <DataTableColumnHeader
     
      column={column}
      title="Name"
    />
  ),
  cell: (cell) => <EditableTableCell {...cell} />,
  meta: {
    type: "Text",
width: 200,

  },
enableSorting: true
},//Generated by GetTableFieldCellInput
{
  accessorKey: "description",
  header: ({ column }) => (
    <DataTableColumnHeader
     
      column={column}
      title="Description"
    />
  ),
  cell: (cell) => <EditableTableCell {...cell} />,
  meta: {
    type: "Textarea",


  },
enableSorting: false
},
  {
    id: "actions",
    cell: (cell) => <DeleteRowColumn {...cell} />,
  },
];
