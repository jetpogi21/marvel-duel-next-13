//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  DeckFormFormikInitialValues,
  DeckModel,
  DeckSearchParams,
} from "@/interfaces/DeckInterfaces";
import { Form, Formik, FormikHelpers, FormikProps } from "formik";
import React, { MouseEventHandler, useEffect, useState } from "react";
import { DEFAULT_FORM_VALUE } from "@/utils/constants/DeckConstants";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useDeckStore } from "@/hooks/decks/useDeckStore";
import { toast } from "@/hooks/use-toast";
import { useDeckQuery } from "@/hooks/decks/useDeckQuery";
//Generated by GetAllModelFormRelatedConstantsImport
//Generated by GetModelFormRelatedConstantsImport - GetAllModelFormRelatedConstantsImport
import {
  COLUMNS as HEROSKILL_COLUMNS,
  DEFAULT_FORM_VALUE as DEFAULT_HEROSKILL_FORM_VALUE,
  DEFAULT_SORT_BY as DEFAULT_HEROSKILL_SORT_BY,
} from "@/utils/constants/HeroSkillConstants";
import { useHeroSkillStore } from "@/hooks/hero-skills/useHeroSkillStore";
import HeroSkillSubform from "@/components/decks/HeroSkillSubform";
//Generated by GetAllModelFormRequiredListImport
//Generated by GetModelFormRequiredListImport - GetModelFormRequiredListImport
import useHeroList from "@/hooks/heroes/useHeroList";

interface DeckFormProps {
  data: DeckModel | null;
  slug: string;
}

const DeckForm: React.FC<DeckFormProps> = (prop) => {
  const { slug } = prop;
  const { router, query, pathname } = useURL<DeckSearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);

  //Zustand variables
  const { isUpdating, setIsUpdating } = useDeckStore((state) => ({
    isUpdating: state.isUpdating,
    setIsUpdating: state.setIsUpdating,
  }));

  //Generated by GetAllRelatedModelSortFromStore
  const { sort: heroSkillSort } = useHeroSkillStore((state) => ({
    sort: state.sort,
  }));

  //Tanstack queries
  //Generated by GetAllRelatedListFromRelatedModel
  //Generated by GetRelatedListFromRelatedModel - GetRelatedListFromRelatedModel
  const { data: heroes } = useHeroList();
  const { deckMutation, deckQuery } = useDeckQuery(slug, {
    enabled: mounted,
    initialData: prop.data,
  });

  const deck = deckQuery.data;

  //The related mode is generated by GetAllRelatedModelEmptyArray
  const initialValues: DeckFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,
    //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
    HeroSkills: [],
  };

  if (deck) {
    for (const key in initialValues) {
      if (deck.hasOwnProperty(key) && initialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = deck[key] === null ? "" : deck[key];
      }
    }

    //Generated by GetAllRelatedModelMapToInitialValue
    //Generated by GetRelatedModelMapToInitialValue - RelatedModelMapToInitialValue
    initialValues.HeroSkills = deck.HeroSkills.map((item, index) => ({
      ...item,
      touched: false,
      index,
    }));
  }

  //Generated by GetAllRelatedModelSortInitialValue
  //Generated by GetRelatedModelSortInitialValue - GetRelatedModelSortInitialValue
  //Sort the HeroSkills array value
  initialValues.HeroSkills.sort((a, b) => {
    const desc = DEFAULT_HEROSKILL_SORT_BY.includes("-");
    const field = desc
      ? DEFAULT_HEROSKILL_SORT_BY.substring(1)
      : DEFAULT_HEROSKILL_SORT_BY;
    return sortData(a, b, desc, field, HEROSKILL_COLUMNS);
  });

  initialValues.HeroSkills.push({
    ...DEFAULT_HEROSKILL_FORM_VALUE,
    index: initialValues.HeroSkills.length + 1,
    heroId: deck ? deck.id : heroes ? heroes[0].id : "",
  });

  const handleFormikSubmit = (
    values: DeckFormFormikInitialValues,
    formik: FormikHelpers<DeckFormFormikInitialValues>
  ) => {
    /* Related models was generated by GetAllRelatedPayloadAssignment*/
    const payload = {
      ...values,
      //Generated by GetAllRelatedPayloadAssignment
      //Generated by GetRelatedPayloadAssignment - GetRelatedPayloadAssignment
      HeroSkills: values.HeroSkills.map((item, index) => ({
        ...item,
        index,
      })).filter((item) => item.touched),
    };

    deckMutation.mutateAsync(payload).then((data) => {
      //Generated by GetAllReplaceEmptyRelatedModel
      //Generated by GetReplaceEmptyRelatedModel - GetReplaceEmptyRelatedModel
      //Replace the id fields of the indexes from the HeroSkills
      const newHeroSkills = values.HeroSkills.map((item, index) => ({
        ...item,
        id: data.HeroSkills.find((item) => item.index === index)?.id || item.id,
      })).sort((a, b) => {
        const desc = heroSkillSort.includes("-");
        const field = desc ? heroSkillSort.substring(1) : heroSkillSort;

        return sortData(a, b, desc, field, HEROSKILL_COLUMNS);
      });

      formik.setFieldValue("HeroSkills", newHeroSkills);

      toast({
        description: "Deck list updated successfully",
        variant: "success",
        duration: 2000,
      });
    });
  };

  const renderFormik = (formik: FormikProps<DeckFormFormikInitialValues>) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col gap-8"
        autoComplete="off"
      >
        {/* Generated by GetAllFormikControls */}
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="name"
          type="Text"
          containerClassNames={["max-w-[200px]"]}
        />

        {/* Generated by GetAllRelatedSubforms */}
        {/* Generated by GetRelatedSubform - GetRelatedSubform */}
        <HeroSkillSubform formik={formik} />
        <div className="flex gap-2">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={handleSubmitClick}
          >
            Save
          </Button>
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <>
      <Breadcrumb
        links={[
          { name: "Decks", href: "/decks" },
          { name: deck ? deck.name : "New Deck", href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
      >
        {renderFormik}
      </Formik>
    </>
  );
};

export default DeckForm;
