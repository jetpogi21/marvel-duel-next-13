//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  DeckFormFormikInitialValues,
  DeckModel,
  DeckSearchParams,
} from "@/interfaces/DeckInterfaces";
import {
  Form,
  Formik,
  FormikHelpers,
  FormikProps,
  useFormikContext,
} from "formik";
import React, { MouseEventHandler, useEffect, useRef, useState } from "react";
import { BasicModel } from "@/interfaces/GeneralInterfaces";
import {
  DEFAULT_FORM_VALUE,
  CONTROL_OPTIONS,
  PRIMARY_KEY,
} from "@/utils/constants/DeckConstants";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useDeckStore } from "@/hooks/decks/useDeckStore";
import { toast } from "@/hooks/use-toast";
import { useDeckQuery } from "@/hooks/decks/useDeckQuery";
import { convertArrayItemsToStrings } from "@/utils/utils";
import { DeckSchema } from "@/schema/DeckSchema";
import { Trash } from "lucide-react";
import { useDeckDeleteDialog } from "@/hooks/decks/useDeckDeleteDialog";
import { DeckDeleteDialog } from "@/components/decks/DeckDeleteDialog";
//Generated by GetAllModelFormRelatedConstantsImport
//Generated by GetModelFormRelatedConstantsImport - GetAllModelFormRelatedConstantsImport
import {
  PRIMARY_KEY as HEROSKILL_PRIMARYKEY,
  COLUMNS as HEROSKILL_COLUMNS,
  DEFAULT_FORM_VALUE as DEFAULT_HEROSKILL_FORM_VALUE,
  DEFAULT_SORT_BY as DEFAULT_HEROSKILL_SORT_BY,
} from "@/utils/constants/HeroSkillConstants";
import { useHeroSkillStore } from "@/hooks/hero-skills/useHeroSkillStore";
import HeroSkillSubform from "@/components/decks/HeroSkillSubform";
//Generated by GetAllModelFormRequiredListImport
//Generated by GetModelFormRequiredListImport - GetModelFormRequiredListImport
import useHeroList from "@/hooks/heroes/useHeroList";

interface DeckFormProps {
  data: DeckModel | null;
  slug: string;
}

const DeckForm: React.FC<DeckFormProps> = (prop) => {
  const { slug } = prop;
  const { router, query, pathname } = useURL<DeckSearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);
  const [recordName, setRecordName] = useState(
    prop.data ? prop.data.name : "New Deck"
  );

  const ref = useRef<any>(null);

  //Zustand variables
  const { isUpdating, setIsUpdating, hasUpdate, setHasUpdate } = useDeckStore(
    (state) => ({
      isUpdating: state.isUpdating,
      setIsUpdating: state.setIsUpdating,
      hasUpdate: state.hasUpdate,
      setHasUpdate: state.setHasUpdate,
    })
  );

  const { setRecordsToDelete } = useDeckDeleteDialog((state) => ({
    setRecordsToDelete: state.setRecordsToDelete,
  }));

  //Generated by GetAllRelatedModelSortFromStore
  const { sort: heroSkillSort } = useHeroSkillStore((state) => ({
    sort: state.sort,
  }));

  //Tanstack queries

  //Generated by GetAllRelatedListFromRightRelatedModel
  //Generated by GetAllRelatedRightModelListFromRelatedModelWithParent
  //Generated by GetRelatedRightModelListFromRelatedModelWithParent - GetRelatedRightModelListFromRelatedModelWithParent
  const { data: heroList } = useHeroList({
    placeholderData: prop.data?.HeroSkills.map((item) => ({
      id: item.heroId,
      //@ts-ignore
      name: item.Deck.name,
    })),
  });

  const { deckMutation, deckQuery } = useDeckQuery(slug, {
    enabled: mounted && slug !== "new",
    initialData: prop.data,
  });

  const deck = deckQuery.data;

  const initialValues: DeckFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,

    //Generated by GetAllRelatedModelEmptyArray
    //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
    HeroSkills: [{ ...DEFAULT_HEROSKILL_FORM_VALUE, index: 0 }],
  };

  if (deck) {
    for (const key in initialValues) {
      if (deck.hasOwnProperty(key) && initialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = deck[key] === null ? "" : deck[key];
      }
    }

    //Generated by GetAllRelatedModelMapToInitialValue
    //Generated by GetRelatedModelMapToInitialValue - RelatedModelMapToInitialValue
    initialValues.HeroSkills = deck.HeroSkills.map((item, index) => ({
      ...item,
      touched: false,
      index,
    }));
  }

  //Generated by GetAllRelatedModelSortInitialValue
  //Generated by GetRelatedModelSortInitialValue - GetRelatedModelSortInitialValue
  //Sort the HeroSkills array value
  initialValues.HeroSkills.sort((a, b) => {
    const desc = DEFAULT_HEROSKILL_SORT_BY.includes("-");
    const field = desc
      ? DEFAULT_HEROSKILL_SORT_BY.substring(1)
      : DEFAULT_HEROSKILL_SORT_BY;
    return sortData(a, b, desc, field, HEROSKILL_COLUMNS, HEROSKILL_PRIMARYKEY);
  });

  initialValues.HeroSkills.push({
    ...DEFAULT_HEROSKILL_FORM_VALUE,
    index: initialValues.HeroSkills.length + 1,
    heroId: deck ? deck.id : "",
  });

  const handleFocus = () => {
    ref && ref.current && ref.current.focus();
  };

  const handleHasUdpate = () => {
    setHasUpdate(true);
  };

  const handleFormikSubmit = (
    values: DeckFormFormikInitialValues,
    formik: FormikHelpers<DeckFormFormikInitialValues>
  ) => {
    //@ts-ignore
    const addNew: boolean = values.addNew;

    const goToNewRecord = () => {
      formik.setValues({
        ...DEFAULT_FORM_VALUE,

        //Generated by GetAllRelatedModelEmptyArray
        //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
        HeroSkills: [{ ...DEFAULT_HEROSKILL_FORM_VALUE, index: 0 }],
      });
      window.history.pushState({}, "", `${window.location.origin}/decks/new`);
      setRecordName("New Deck");

      handleFocus();
    };

    if (hasUpdate) {
      const payload = {
        ...values,
        //Generated by GetAllRelatedPayloadAssignment
        //Generated by GetRelatedPayloadAssignment - GetRelatedPayloadAssignment
        HeroSkills: values.HeroSkills.map((item, index) => ({
          ...item,
          index,
        })).filter((item) => item.touched),
      };

      deckMutation
        .mutateAsync(payload)
        .then((data) => {
          if (addNew) {
            goToNewRecord();
          } else {
            if (data.id) {
              formik.setFieldValue("id", data.id);
            }

            if (data.slug) {
              window.history.pushState(
                {},
                "",
                `${window.location.origin}/decks/${data.slug}`
              );
            }

            setRecordName(values.name);

            //Generated by GetAllReplaceEmptyRelatedModel
            //Generated by GetReplaceEmptyRelatedModel - GetReplaceEmptyRelatedModel
            //Replace the id fields of the indexes from the HeroSkills
            const newHeroSkills = values.HeroSkills.map((item, index) => ({
              ...item,
              id:
                data.HeroSkills.find((item) => item.index === index)?.id ||
                item.id,
            })).sort((a, b) => {
              const desc = heroSkillSort.includes("-");
              const field = desc ? heroSkillSort.substring(1) : heroSkillSort;

              return sortData(a, b, desc, field, HEROSKILL_COLUMNS);
            });

            formik.setFieldValue("HeroSkills", newHeroSkills);
          }

          toast({
            description: "Deck list updated successfully",
            variant: "success",
            duration: 2000,
          });
        })
        .catch((err) => console.log(err));
    } else {
      if (addNew) {
        goToNewRecord();
      }
    }
  };

  const renderFormik = (formik: FormikProps<DeckFormFormikInitialValues>) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col flex-1 h-full gap-4"
        autoComplete="off"
      >
        <div className="flex gap-4">
          {/* Generated by GetAllFormikControls */}
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="name"
            type="Text"
            label="Name"
            containerClassNames={["w-[500px]"]}
            ref={ref}
            setFocusOnLoad={true}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="is_hero"
            type="Checkbox"
            label="Hero"
            containerClassNames={["w-auto"]}
            setHasUpdate={handleHasUdpate}
          />
        </div>
        {/* Generated by GetAllRelatedSubforms */}
        {/* Generated by GetRelatedSubform - GetRelatedSubform */}
        <HeroSkillSubform formik={formik} />

        <div className="flex gap-2 mt-auto">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", true);
              handleSubmitClick(e);
            }}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", false);
              handleSubmitClick(e);
            }}
          >
            Save
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"ghost"}
            onClick={(e) => {
              router.back();
            }}
          >
            Cancel
          </Button>
          {slug !== "new" && (
            <Button
              type="button"
              size={"sm"}
              variant={"destructive"}
              onClick={(e) => {
                setRecordsToDelete([formik.values[PRIMARY_KEY].toString()]);
              }}
              className={"ml-auto"}
            >
              <Trash className="w-4 h-4 mr-2" />
              Delete
            </Button>
          )}
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
    handleFocus();
  }, []);

  return (
    <>
      <Breadcrumb
        links={[
          { name: "Decks", href: "/decks" },
          { name: recordName, href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
        validationSchema={DeckSchema}
      >
        {renderFormik}
      </Formik>
      <DeckDeleteDialog
        onSuccess={() => {
          toast({
            description: "Deck successfully deleted.",
            variant: "success",
            duration: 4000,
          });
          router.back();
        }}
      />
    </>
  );
};

export default DeckForm;
