//Generated by WriteToModelfilterform_tsx
"use client";
import { useDeckStore } from "@/hooks/decks/useDeckStore";
//Generated by GeneratePageFile
import {
  DeckFormikFilter,
  DeckSearchParams,
} from "@/interfaces/DeckInterfaces";
import { DEFAULT_LIMIT } from "@/utils/constants";
import { getFilterValueFromURL, getParamsObject } from "@/utils/utilities";
import { encodeParams } from "@/utils/utils";
import { Form, Formik, FormikHelpers, FormikProps } from "formik";
import React from "react";
import { DEFAULT_FILTERS } from "@/utils/constants/DeckConstants";
import LimitSelector from "@/components/form/LimitSelector";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";

const DeckFilterForm: React.FC = () => {
  const { router, query, pathname } = useURL<DeckSearchParams>();

  //SearchParams Variables
  const limit = query["limit"] || DEFAULT_LIMIT;

  const defaultFilters = DEFAULT_FILTERS;
  const initialValues: DeckFormikFilter = getFilterValueFromURL(
    query,
    defaultFilters
  );

  //Zustand stores
  const [setPage, setLastPage, setFetchCount, resetRowSelection] = useDeckStore(
    (state) => [
      state.setPage,
      state.setLastPage,
      state.setFetchCount,
      state.resetRowSelection,
    ]
  );

  const handleFormikSubmit = (
    values: Partial<DeckFormikFilter>,
    formik: FormikHelpers<DeckFormikFilter>
  ) => {
    const params = {
      ...query,
      ...(getParamsObject(values, defaultFilters) as Partial<DeckSearchParams>),
    };

    const newURL = `${pathname}?${encodeParams(params)}`;
    router.push(newURL);
    setFetchCount(true);
    setPage(1);
    setLastPage(1);
    resetRowSelection();
  };

  const handleLimitChange = (value: string) => {
    const params = { ...query, limit: value };
    const newURL = `${pathname}?${encodeParams(params)}`;
    router.push(newURL);
    resetRowSelection();
  };

  const renderFormik = (formik: FormikProps<DeckFormikFilter>) => {
    return (
      <Form className="flex gap-4">
        {/* Generated by GetFormikFilterQControl */}
        <FormikControl
          containerClassNames={["w-[500px]"]}
          name="q"
          submitOnChange={true}
          placeholder="Filter decks..."
          type="Text"
        />
        <FormikControl
          containerClassNames={["flex-row"]}
          name="is_hero"
          label="Hero"
          submitOnChange={true}
          type="Switch"
        />
      </Form>
    );
  };

  return (
    <div className="flex justify-between w-full">
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
      >
        {renderFormik}
      </Formik>
      <LimitSelector
        handleLimitChange={handleLimitChange}
        value={limit}
      />
    </div>
  );
};

export default DeckFilterForm;
