//Generated by Generate_getModelAPIRouteNext13 - getModel API Route Next 13
import { Card } from "@/models/CardModel";
import { FindOptions, Sequelize } from "sequelize";
import { cloneDeep } from "lodash";
import { genericDelete, genericGetOneBySlug } from "@/utils/generic";
import { CardFormUpdatePayload } from "@/interfaces/CardInterfaces";
import { CardSchema } from "@/schema/CardSchema";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { returnJSONResponse, validateRequiredFields } from "@/utils/utils";
import { Op } from "sequelize";
import { updateCard } from "@/utils/api/CardLibs";
import { NextResponse } from "next/server";
import { PRIMARY_KEY } from "@/utils/constants/CardConstants";
//Generated by GetAllAPIRelatedLeftModelImportBySeqModel
//Generated by GetAPIRelatedLeftModelImport - GetAPIRelatedLeftModelImport
import { CardCardKeyword } from "@/models/CardCardKeywordModel";
import { CardCardKeywordModel } from "@/interfaces/CardCardKeywordInterfaces";
import { CardCardKeywordSchema } from "@/schema/CardCardKeywordSchema";
import { PRIMARY_KEY as CARDCARDKEYWORD_PRIMARY_KEY } from "@/utils/constants/CardCardKeywordConstants";
import {
  createCardCardKeyword,
  deleteCardCardKeywords,
  updateCardCardKeyword,
} from "@/utils/api/CardCardKeywordLibs";
//Generated by GetAllAPIRelatedRightModelImportBySeqModel
//Generated by GetAPIRelatedRightModelImport - GetAPIRelatedRightModelImport
import { Deck } from "@/models/DeckModel";
import { CardKeyword } from "@/models/CardKeywordModel";

const ModelObject = Card;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof Card> = {
  //Generated by GenerateIncludeOption

  include: [
    {
      model: Deck,
      //Generated by GenerateAttributesOption

      attributes: ["id", "name", "slug"],
    },
    {
      model: CardCardKeyword,
      //Generated by GenerateAttributesOption

      attributes: ["id", "cardId", "cardKeywordId"],
      include: [{ model: CardKeyword, attributes: ["id", "name", "slug"] }],
    },
  ],
  //Generated by GenerateAttributesOption

  attributes: [
    "id",
    "name",
    "type",
    "cost",
    "battleStyle",
    "atk",
    "shield",
    "description",
    "deckId",
    "slug",
  ],
};

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof Card> = cloneDeep(findOptions);

  const id = params.id;
  return genericGetOneBySlug(ModelObject, findOptionsCopy, id);
};

//Generated by GetUpdateFunctionWithRelationshipNext13 - Update With Relationship Next 13
export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = (await req.json()) as CardFormUpdatePayload;
  const id = params.id;

  try {
    await CardSchema.validate(res);
  } catch (error: any) {
    return returnJSONResponse({
      status: "error",
      errorCode: 401,
      error: error.message,
    });
  }

  //Generated by GetAllRelatedSimpleModelFromRes
  //Generated by GetRelatedSimpleModelFromRes - GetRelatedSimpleModelFromRes
  const { deletedCardCardKeywords, newCardKeywords } = res;

  const t = await sequelize.transaction();

  try {
    await updateCard(res, PRIMARY_KEY, t, id);

    //Generated by GetAllThroughModelUpdateOrInsert
    //Generated by GetThroughModelUpdateOrInsert - GetThroughModelUpdateOrInsert
    const createdCardCardKeywords: { cardKeywordId: number; id: number }[] = [];
    if (newCardKeywords.length > 0) {
      for (const item of newCardKeywords) {
        const cardCardKeyword = await createCardCardKeyword(
          {
            cardId: id,
            cardKeywordId: item,
          },
          t
        );

        createdCardCardKeywords.push({
          cardKeywordId: parseInt(item),
          id: cardCardKeyword[CARDCARDKEYWORD_PRIMARY_KEY],
        });
      }
    }

    if (deletedCardCardKeywords.length > 0) {
      await deleteCardCardKeywords(
        CARDCARDKEYWORD_PRIMARY_KEY,
        deletedCardCardKeywords.map((item) => parseInt(item)),
        t
      );
    }

    t.commit();
    return NextResponse.json({
      status: "success",
      //Generated by GetAllRelatedModelKeyValue
      CardCardKeywords: createdCardCardKeywords, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
    });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  return genericDelete(ModelObject, id);
};
