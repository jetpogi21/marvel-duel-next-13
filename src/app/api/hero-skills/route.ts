//Generated by WriteToModelsRouteApi
import { HeroSkill } from "@/models/HeroSkillModel";
import { FindOptions } from "sequelize";
import { cloneDeep } from "lodash";
import {
  checkDuplicateCombinations,
  formatSortAsSequelize,
  getSort,
  parseParams,
  returnJSONResponse,
  splitWordByLastHyphen,
  validateFieldIfBlank,
} from "@/utils/utils";
import { genericGetAll } from "@/utils/generic";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { Op } from "sequelize";
import {
  HeroSkillSearchParams,
  HeroSkillUpdatePayload,
} from "@/interfaces/HeroSkillInterfaces";
import { NextResponse } from "next/server";
import { DEFAULT_LIMIT } from "@/utils/constants";
import {
  DEFAULT_SORT_BY,
  PRIMARY_KEY,
  REQUIRED_FIELDS,
  UNIQUE_FIELDS,
} from "@/utils/constants/HeroSkillConstants";
import { HeroSkillSchema } from "@/schema/HeroSkillSchema";

const ModelObject = HeroSkill;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof HeroSkill> = {
  //Generated by GenerateIncludeOption
  include: [],
  //Generated by GenerateAttributesOption
  attributes: [
    //Generated by GetAllModelAttributesBySeqModel
    "id",
    "name",
    "type",
    "cost",
    "description",
    "heroId",
  ],
};

//Generated by Generate_getModelsSimpleFilterNext13
export const GET = async (req: Request) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof HeroSkill> = cloneDeep(findOptions);
  const heroSkillAttributes = Object.keys(HeroSkill.getAttributes()).map(
    (attribute) => attribute
  );

  const searchParams = new URL(req.url).searchParams;

  const query = parseParams(searchParams) as Partial<HeroSkillSearchParams>;
  const primaryKey = PRIMARY_KEY;

  const simpleOnly = query["simpleOnly"];
  const cursor = query["cursor"];
  const fetchCount = query["fetchCount"] === "true";

  let limit = query["limit"];
  const sort = query["sort"]
    ? heroSkillAttributes.includes(query["sort"]) ||
      heroSkillAttributes.includes(query["sort"].substring(1))
      ? query["sort"]
      : DEFAULT_SORT_BY
    : DEFAULT_SORT_BY;

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;

  if (!simpleOnly) {
    const where: Record<string | symbol, unknown> = { [Op.and]: [] };
    const andFilters = [];

    const q = query["q"];

    if (q) {
      andFilters.push({
        [Op.or]: [
          //Generated by GetAllQFilterFieldBySeqModel
          { description: { [Op.like]: `%${q}%` } },
          { name: { [Op.like]: `%${q}%` } },
        ],
      });
    }

    //Generated by GetAllBackendFiltersBySeqModel
    //Generated by GetBackendFilter
    const type = query["type"];
    if (type) {
      andFilters.push({
        type: type,
      });
    }
    //Generated by GetBackendFilter
    const hero = query["hero"];
    if (hero) {
      andFilters.push({
        heroId: {
          [Op.in]: hero.split(","),
        },
      });
    }

    //get all the count here first
    let recordCount = 0;
    if (fetchCount) {
      recordCount = await HeroSkill.count({
        where: { [Op.and]: andFilters },
      });
    }

    if (cursor) {
      //Use less than if the sort is descending
      const cursorCondition = sort.includes("-") ? Op.lt : Op.gt;
      //If sortField is not primary key then do dual cursor
      if (sortField !== primaryKey) {
        const cursorArray = splitWordByLastHyphen(cursor);

        if (cursorArray[0] === "") {
          if (cursorCondition === Op.gt) {
            andFilters.push({
              [Op.or]: {
                [sortField]: {
                  [Op.not]: null,
                },
                [Op.and]: {
                  [sortField]: { [Op.is]: null },
                  [primaryKey]: {
                    [Op.gt]: cursorArray[1],
                  },
                },
              },
            });
          } else {
            andFilters.push({
              [Op.or]: {
                [Op.and]: {
                  [sortField]: { [Op.is]: null },
                  [primaryKey]: {
                    [Op.gt]: cursorArray[1],
                  },
                },
              },
            });
          }
        } else {
          if (cursorCondition === Op.gt) {
            andFilters.push({
              [Op.or]: {
                [sortField]: {
                  [cursorCondition]: cursorArray[0],
                },
                [Op.and]: {
                  [sortField]: cursorArray[0],
                  [primaryKey]: {
                    [Op.gt]: cursorArray[1],
                  },
                },
              },
            });
          } else {
            andFilters.push({
              [Op.or]: {
                [sortField]: {
                  [Op.or]: {
                    [Op.is]: null,
                    [cursorCondition]: cursorArray[0],
                  },
                },
                [Op.and]: {
                  [sortField]: cursorArray[0],
                  [primaryKey]: {
                    [Op.gt]: cursorArray[1],
                  },
                },
              },
            });
          }
        }
      } else {
        andFilters.push({
          [sortField]: {
            [cursorCondition]: cursor,
          },
        });
      }
    }

    where[Op.and] = andFilters;
    findOptionsCopy.where = where;
    limit = limit || DEFAULT_LIMIT;
    findOptionsCopy.limit = parseInt(limit);

    //@ts-ignore
    findOptionsCopy.order = formatSortAsSequelize(
      getSort(sort, DEFAULT_SORT_BY, primaryKey)
    );

    try {
      const data = await HeroSkill.findAll(findOptionsCopy);

      let cursor = "";

      if (data && data.length > 0) {
        //The cursor will have 2 items since there will be 2 cursors to be made
        if (sortField !== primaryKey) {
          //@ts-ignore
          if (data[data.length - 1][sortField] === null) {
            cursor = `-${data[data.length - 1][primaryKey].toString()}`;
          } else {
            //@ts-ignore
            cursor = `${data[data.length - 1][sortField].toString()}-${data[
              data.length - 1
            ][primaryKey].toString()}`;
          }
        } else {
          cursor = `${data[data.length - 1][sortField].toString()}`;
        }
      }

      return NextResponse.json({
        rows: data,
        cursor,
        ...(fetchCount && { count: recordCount }),
      });
    } catch (err) {
      return handleSequelizeError(err);
    }
  } else {
    return genericGetAll(ModelObject, findOptionsCopy);
  }
};

export const POST = async (req: Request) => {
  const body = (await req.json()) as HeroSkillUpdatePayload;
  const { HeroSkills, deletedHeroSkills } = body;

  //Generated by GenerateUniquenessValidation
  //Validate record uniqueness

  UNIQUE_FIELDS.forEach((item) => {
    const uniquenessError = checkDuplicateCombinations(item, HeroSkills);

    if (uniquenessError) {
      return returnJSONResponse({
        status: "error",
        error: uniquenessError,
        errorCode: 422,
      });
    }
  });

  const t = await sequelize.transaction();
  let recordsCreated = 0;
  let recordsDeleted = 0;

  for (const item of HeroSkills) {
    try {
      await HeroSkillSchema.validate(item);
    } catch (error) {
      return handleSequelizeError(error);
    }
  }

  try {
    for (const item of HeroSkills) {
      if (item[PRIMARY_KEY] === "") {
        await HeroSkill.create(
          {
            //Generated by GetAllFieldsToUpdateBySeqModel
            name: item.name!,
            type: item.type!,
            cost: item.cost ? parseInt(item.cost as string) : null,
            description: item.description!,
            heroId: parseInt(item.heroId as string),
          },
          { transaction: t }
        );

        recordsCreated++;
      } else {
        await HeroSkill.update(
          {
            //Generated by GetAllFieldsToUpdateBySeqModel
            name: item.name!,
            type: item.type!,
            cost: item.cost ? parseInt(item.cost as string) : null,
            description: item.description!,
            heroId: parseInt(item.heroId as string),
          },
          { where: { [PRIMARY_KEY]: item[PRIMARY_KEY] }, transaction: t }
        );
      }
    }

    if (deletedHeroSkills.length > 0) {
      // Get the count of records to be deleted
      const recordsToDeleteCount = await HeroSkill.count({
        where: { [PRIMARY_KEY]: { [Op.in]: deletedHeroSkills } },
      });

      await HeroSkill.destroy({
        where: { [PRIMARY_KEY]: { [Op.in]: deletedHeroSkills } },
        transaction: t,
      });

      // Set the recordsDeleted count to the actual number of records deleted
      recordsDeleted = recordsToDeleteCount;
    }

    await t.commit();

    return NextResponse.json({
      recordsCreated,
      recordsDeleted,
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};
