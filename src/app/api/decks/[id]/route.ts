//Generated by Generate_getModelAPIRouteNext13 - getModel API Route Next 13
import { Deck } from "@/models/DeckModel";
import { FindOptions, Sequelize } from "sequelize";
import { cloneDeep } from "lodash";
import { genericDelete, genericGetOneBySlug } from "@/utils/generic";
import { DeckFormUpdatePayload } from "@/interfaces/DeckInterfaces";
import { DeckSchema } from "@/schema/DeckSchema";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { returnJSONResponse, validateRequiredFields } from "@/utils/utils";
import { Op } from "sequelize";
import { updateDeck } from "@/utils/api/DeckLibs";
import { NextResponse } from "next/server";
import { PRIMARY_KEY } from "@/utils/constants/DeckConstants";
//Generated by GetAllAPIRelatedLeftModelImportBySeqModel
//Generated by GetAPIRelatedLeftModelImport - GetAPIRelatedLeftModelImport
import { Hero } from "@/models/HeroModel";
import { HeroModel } from "@/interfaces/HeroInterfaces";
import { HeroSchema } from "@/schema/HeroSchema";
import { PRIMARY_KEY as HERO_PRIMARY_KEY } from "@/utils/constants/HeroConstants";
import { createHero, deleteHeroes, updateHero } from "@/utils/api/HeroLibs";
//Generated by GetAPIRelatedLeftModelImport - GetAPIRelatedLeftModelImport
import { HeroSkill } from "@/models/HeroSkillModel";
import { HeroSkillModel } from "@/interfaces/HeroSkillInterfaces";
import { HeroSkillSchema } from "@/schema/HeroSkillSchema";
import { PRIMARY_KEY as HEROSKILL_PRIMARY_KEY } from "@/utils/constants/HeroSkillConstants";
import {
  createHeroSkill,
  deleteHeroSkills,
  updateHeroSkill,
} from "@/utils/api/HeroSkillLibs";

const ModelObject = Deck;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof Deck> = {
  //Generated by GenerateIncludeOption
  include: [
    {
      model: HeroSkill,
      //Generated by GenerateAttributesOption
      attributes: ["id", "name", "type", "cost", "description", "heroId"],
      //Generated by GenerateIncludeOption

      include: [
        {
          model: Deck,
          //Generated by GenerateAttributesOption

          attributes: ["id", "name", "slug"],
        },
      ],
    },
    {
      model: Hero,
      //Generated by GenerateAttributesOption
      attributes: ["belongsto_id"],
    },
  ],
  //Generated by GenerateAttributesOption
  attributes: [
    "id",
    "name",
    "slug", //Generated by GetAllExpressionLiteralFieldBySeqModel
    //Generated by GetExpressionLiteralField
    [Sequelize.literal("NOT belongsto_id IS NULL"), "is_hero"],
  ],
};

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof Deck> = cloneDeep(findOptions);

  const id = params.id;

  return genericGetOneBySlug(ModelObject, findOptionsCopy, id);
};

//Generated by GetUpdateFunctionWithRelationshipNext13 - Update With Relationship Next 13
export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = (await req.json()) as DeckFormUpdatePayload;
  const id = params.id;

  try {
    await DeckSchema.validate(res);
  } catch (error: any) {
    return returnJSONResponse({
      status: "error",
      errorCode: 401,
      error: error.message,
    });
  }

  //Generated by GetAllRelatedPluralizedModelName
  const { HeroSkills } = res;

  const t = await sequelize.transaction();

  try {
    await updateDeck(res, PRIMARY_KEY, t, id);

    //Generated by GetAllRelatedModelUpdateOrInsert
    //Generated by GetRelatedModelUpdateOrInsert - GetRelatedModelUpdateOrInsert
    const createdHeroSkills: { index: number; id: number }[] = [];
    if (HeroSkills) {
      for (const item of HeroSkills) {
        item.heroId = id;
        await HeroSkillSchema.validate(item);

        if (item[HEROSKILL_PRIMARY_KEY] === "") {
          const heroSkill = await createHeroSkill(item, t);

          createdHeroSkills.push({
            index: item.index,
            id: heroSkill[HEROSKILL_PRIMARY_KEY],
          });
        } else {
          await updateHeroSkill(item, HEROSKILL_PRIMARY_KEY, t);
        }
      }
    }

    t.commit();
    return NextResponse.json({
      status: "success",
      //Generated by GetAllRelatedModelKeyValue
      HeroSkills: createdHeroSkills, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
    });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  return genericDelete(ModelObject, id);
};
