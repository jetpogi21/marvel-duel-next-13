//Generated by WriteToModelsRouteApi - models route next 13
import { Deck } from "@/models/DeckModel";
import { FindOptions, QueryTypes, Transaction } from "sequelize";
import {
  checkDuplicateCombinations,
  getSort,
  parseParams,
  returnJSONResponse,
  validateFieldIfBlank,
} from "@/utils/utils";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { Op } from "sequelize";
import {
  DeckDeletePayload,
  DeckFormikShape,
  DeckModel,
  DeckSearchParams,
  DeckUpdatePayload,
} from "@/interfaces/DeckInterfaces";
import { NextResponse } from "next/server";
import { DEFAULT_LIMIT } from "@/utils/constants";
import {
  COLUMNS,
  DEFAULT_SORT_BY,
  PRIMARY_KEY,
  REQUIRED_FIELDS,
  TABLE_NAME,
  UNIQUE_FIELDS,
} from "@/utils/constants/DeckConstants";
import clsSQL from "@/utils/clsSQL";
import clsJoin from "@/utils/clsJoin";
import {
  addCursorFilterToQuery,
  appendFieldsToSQL,
  getColumnKeyByDbName,
  getCursorString,
  getDatabaseFieldName,
  getMappedKeys,
  getSortedValue,
  processFields,
  resetSQL,
} from "@/utils/api/utils";
import { DeckSchema } from "@/schema/DeckSchema";

//Generated by GenerateImportRelatedModels

const ModelObject = Deck;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof Deck> = {
  //Generated by GenerateIncludeOption
  include: [],
  //Generated by GenerateAttributesOption
  attributes: [
    //Generated by GetAllModelAttributesBySeqModel
    "id",
    "name",
    "slug",
    "createdAt",
    "updatedAt",
  ],
};

//Reusable functions
export const createDeck = async (
  deck: Omit<DeckFormikShape, "touched">,
  t: Transaction
) => {
  return await Deck.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      name: deck.name!,
    },
    { transaction: t }
  );
};

export const updateDeck = async (
  deck: Omit<DeckFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<DeckFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await Deck.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      name: deck.name!,
    },
    {
      where: { [primaryKey]: primaryKeyValue || deck[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteDecks = async (
  primaryKey: keyof Omit<DeckFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await Deck.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};

//Generated by GetGetmodelsqlNext13 - getModelSQL Next 13
function getDeckSQL(
  query: Partial<DeckSearchParams>,
  dontFilter: boolean = false
) {
  const deckAttributes = getMappedKeys(COLUMNS);

  const simpleOnly = query["simpleOnly"];
  const cursor = query["cursor"];
  const limit = query["limit"] || DEFAULT_LIMIT;

  const sort = getSortedValue(
    query["sort"]
      ? `${query["sort"].includes("-") ? "-" : ""}${getDatabaseFieldName(
          query["sort"],
          COLUMNS
        )}`
      : undefined,
    deckAttributes,
    DEFAULT_SORT_BY
  );

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;

  //Declare the variables
  const table = TABLE_NAME;
  const fields: ([string, string] | string)[] =
    //Generated by GenerateSQLFieldList
    ["slug", "id", "name"];

  //This will be used to store the fields to be used from the joins
  const joinFields: string[] = [];

  //This will be used to store the replacements needed
  let replacements: Record<string, string> = {};

  const sql = new clsSQL();
  sql.source = table;

  const filters: string[] = [];

  if (!simpleOnly || simpleOnly !== "true") {
    //Generated by GenerateSeqModelFilters
    //Generated by GetLikeFilters
    const q = query.q as string;

    if (q && !dontFilter) {
      const fields: string[] = ["name"];
      replacements["q"] = `*${q}*`;
      filters.push(`MATCH (${fields.join(",")}) AGAINST (:q IN boolean mode)`);
    }

    if (query.is_hero === "true") {
      //Generated by GetRelationshipClsjoin
      const heroJoin = new clsJoin(
        "marvelduel_hero",
        "id",
        "belongsto_id",
        "",
        "INNER"
      );
      sql.joins = [heroJoin];
    }
  }

  /* INSERT JOINS HERE */

  //Count should be pre-cursor
  //This part would return the count SQL
  sql.fields = [`COUNT(DISTINCT ${PRIMARY_KEY}) AS count`];
  if (filters.length > 0) {
    sql.filter = filters.join(" AND ");
  }
  const countSQL = sql.sql();
  sql.filter = "";

  sql.orderBy = getSort(sort, DEFAULT_SORT_BY, PRIMARY_KEY);
  if (cursor) {
    addCursorFilterToQuery(
      cursor,
      sort,
      sortField,
      PRIMARY_KEY,
      replacements,
      filters
    );
  }

  if (filters.length > 0) {
    sql.filter = filters.join(" AND ");
  }

  sql.limit = simpleOnly === "true" ? 0 : parseInt(limit);

  //This part will produce the distinct SQL
  sql.fields = [PRIMARY_KEY];
  sql.groupBy = [PRIMARY_KEY];

  const distinctSQL = sql.sql();

  const distinctJoin = new clsJoin(
    distinctSQL,
    PRIMARY_KEY,
    PRIMARY_KEY,
    "tempDistinct",
    "INNER"
  );

  sql.fields = [];

  //build the sql field name and aliases (aliases are used to destructure the object)
  appendFieldsToSQL(fields, sql, table);

  sql.fields = sql.fields.concat(joinFields);

  /* Insert Join Cancellations here..*/
  //Insert joins here LEFT joins e.g. cardCardKeywordJoin, distincJoin or
  //new clsJoin("marvelduel_belongsto", "deck_id", "id", null)

  //Generated by GetSimpleJoinSnippet
  sql.fields = sql.fields.concat([
    //Generated by GetAllSimpleJoinFieldsBySeqModel
    "marvelduel_hero.belongsto_id AS `Hero.heroID`",
    "marvelduel_hero.belongsto_id IS NOT NULL as is_hero",
  ]);
  //Add to your sql.joins
  const heroJoin = new clsJoin(
    "marvelduel_hero",
    "id",
    "belongsto_id",
    "",
    "LEFT"
  );

  sql.joins = [distinctJoin, heroJoin];
  resetSQL(sql);

  const sqlString: string = sql.sql();

  return {
    sqlString,
    countSQL,
    replacements,
  };
}

//Generated by GetSqlModelsGetRoute
export const GET = async (req: Request) => {
  const searchParams = new URL(req.url).searchParams;
  const query = parseParams(searchParams) as Partial<DeckSearchParams>;

  const deckAttributes = getMappedKeys(COLUMNS);

  const fetchCount = query["fetchCount"] === "true";
  const sort = getSortedValue(
    query["sort"]
      ? `${query["sort"].includes("-") ? "-" : ""}${getDatabaseFieldName(
          query["sort"],
          COLUMNS
        )}`
      : undefined,
    deckAttributes,
    DEFAULT_SORT_BY
  );

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;
  const cursorField = getColumnKeyByDbName(sortField, COLUMNS);

  let { sqlString, countSQL, replacements } = getDeckSQL(query);

  let recordCount;
  if (fetchCount) {
    const countResult: any = await sequelize.query(countSQL, {
      replacements,
      type: QueryTypes.SELECT,
    });

    recordCount = countResult[0].count;
  }

  let data: DeckModel[] = await sequelize.query(sqlString, {
    replacements,
    type: QueryTypes.SELECT,
    nest: true,
  });

  let cursor = "";

  if (data && data.length > 0) {
    cursor = getCursorString(cursorField, PRIMARY_KEY, data);
  }

  //Add any object that will be turned into an array
  //e.g. const result = reduceResult(result as any, [["CardCardKeyword", "CardCardKeywords"],]);

  //Remove duplicating CardUnityCards
  //removeDuplicates(result as any, "CardUnityCards", "id");

  return NextResponse.json({
    rows: data,
    cursor,
    ...(fetchCount && { count: recordCount }),
  });
};

export const POST = async (req: Request) => {
  const body = (await req.json()) as DeckUpdatePayload;
  const { Decks } = body;

  //Generated by GenerateUniquenessValidation
  //Validate record uniqueness

  UNIQUE_FIELDS.forEach((item) => {
    const uniquenessError = checkDuplicateCombinations(item, Decks);

    if (uniquenessError) {
      return returnJSONResponse({
        status: "error",
        error: uniquenessError,
        errorCode: 422,
      });
    }
  });

  const t = await sequelize.transaction();
  let recordsCreated = 0;

  for (const item of Decks) {
    try {
      await DeckSchema.validate(item);
    } catch (error) {
      return handleSequelizeError(error);
    }
  }

  try {
    for (const item of Decks) {
      if (item[PRIMARY_KEY] === "") {
        await createDeck(item, t);
        recordsCreated++;
      } else {
        await updateDeck(item, PRIMARY_KEY, t);
      }
    }

    await t.commit();

    return NextResponse.json({
      recordsCreated,
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (req: Request) => {
  const body = (await req.json()) as DeckDeletePayload;
  const { deletedDecks } = body;

  if (deletedDecks.length > 0) {
    const t = await sequelize.transaction();
    try {
      await deleteDecks(PRIMARY_KEY, deletedDecks, t);
      t.commit();
      return NextResponse.json({
        status: "success",
        recordsDeleted: deletedDecks.length,
      });
    } catch (error) {
      t.rollback();
      return handleSequelizeError(error);
    }
  }
};
