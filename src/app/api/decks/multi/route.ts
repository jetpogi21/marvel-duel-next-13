//Generated by WriteToMultiRoute_ts - multi route.ts
import sequelize from "@/config/db";
import { createDeck, updateDeck } from "@/utils/api/DeckLibs";
import { DeckUpdatePayload } from "@/interfaces/DeckInterfaces";
import { DeckSchema } from "@/schema/DeckSchema";
import { PRIMARY_KEY, UNIQUE_FIELDS } from "@/utils/constants/DeckConstants";
import handleSequelizeError from "@/utils/errorHandling";
import { checkDuplicateCombinations, returnJSONResponse } from "@/utils/utils";
import { NextResponse } from "next/server";

//Generated by GetMultiCreateModelPOSTRoute - GetMultiCreateModelPOSTRoute
export const POST = async (req: Request) => {
  const body = (await req.json()) as DeckUpdatePayload;
  const { Decks } = body;

  //Generated by GenerateUniquenessValidation
  //Validate record uniqueness

  UNIQUE_FIELDS.forEach((item) => {
    const uniquenessError = checkDuplicateCombinations(item, Decks);

    if (uniquenessError) {
      return returnJSONResponse({
        status: "error",
        error: uniquenessError,
        errorCode: 422,
      });
    }
  });

  const t = await sequelize.transaction();
  let recordsCreated = 0;

  for (const item of Decks) {
    try {
      await DeckSchema.validate(item);
    } catch (error) {
      return handleSequelizeError(error);
    }
  }

  try {
    for (const item of Decks) {
      if (item[PRIMARY_KEY] === "") {
        await createDeck(item, t);
        recordsCreated++;
      } else {
        await updateDeck(item, PRIMARY_KEY, t);
      }
    }

    await t.commit();

    return NextResponse.json({
      recordsCreated,
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};
