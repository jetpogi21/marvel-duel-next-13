//Generated by WriteToModelsRouteApiNoForm - models route next 13 no form
import { CardUnityCard } from "@/models/CardUnityCardModel";
import { FindOptions, Transaction } from "sequelize";
import { Op } from "sequelize";
import { CardUnityCardFormikShape } from "@/interfaces/CardUnityCardInterfaces";

const ModelObject = CardUnityCard;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof CardUnityCard> = {
  //Generated by GenerateIncludeOption
  include: [],
  //Generated by GenerateAttributesOption
  attributes: [
    //Generated by GetAllModelAttributesBySeqModel
    "description",
    "CardUnityId",
    "CardId",
    "id",
    "createdAt",
    "updatedAt",
  ],
};

//Reusable functions
export const createCardUnityCard = async (
  cardUnityCard: Partial<CardUnityCardFormikShape>,
  t: Transaction
) => {
  return await CardUnityCard.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      description: cardUnityCard.description!,
      CardUnityId: parseInt(cardUnityCard.CardUnityId as string),
      CardId: parseInt(cardUnityCard.CardId as string),
    },
    { transaction: t }
  );
};

export const updateCardUnityCard = async (
  cardUnityCard: Omit<CardUnityCardFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<CardUnityCardFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await CardUnityCard.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      description: cardUnityCard.description!,
      CardUnityId: parseInt(cardUnityCard.CardUnityId as string),
      CardId: parseInt(cardUnityCard.CardId as string),
    },
    {
      where: { [primaryKey]: primaryKeyValue || cardUnityCard[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteCardUnityCards = async (
  primaryKey: keyof Omit<CardUnityCardFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await CardUnityCard.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
