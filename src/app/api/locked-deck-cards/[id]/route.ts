//Generated by Generate_getModelAPIRouteNext13 - getModel API Route Next 13
import { LockedDeckCard } from "@/models/LockedDeckCardModel";
import { FindOptions, Sequelize } from "sequelize";
import { cloneDeep } from "lodash";
import { genericDelete, genericGetOne } from "@/utils/generic";
import { LockedDeckCardFormUpdatePayload } from "@/interfaces/LockedDeckCardInterfaces";
import { LockedDeckCardSchema } from "@/schema/LockedDeckCardSchema";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { returnJSONResponse, validateRequiredFields } from "@/utils/utils";
import { Op } from "sequelize";
import { updateLockedDeckCard } from "@/utils/api/LockedDeckCardLibs";
import { NextResponse } from "next/server";
import { PRIMARY_KEY } from "@/utils/constants/LockedDeckCardConstants";

//Generated by GetAllAPIRelatedRightModelImportBySeqModel
//Generated by GetAPIRelatedRightModelImport - GetAPIRelatedRightModelImport
import { Card } from "@/models/CardModel";
//Generated by GetAPIRelatedRightModelImport - GetAPIRelatedRightModelImport
import { LockedDeck } from "@/models/LockedDeckModel";

const ModelObject = LockedDeckCard;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof LockedDeckCard> = {
  //Generated by GenerateIncludeOption

  include: [
    {
      model: LockedDeck,
      //Generated by GenerateAttributesOption

      attributes: ["id", "name", "slug"],
    },
  ],
  //Generated by GenerateAttributesOption

  attributes: ["id", "lockedDeckId", "cardId"],
};

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof LockedDeckCard> =
    cloneDeep(findOptions);

  const id = params.id;
  return genericGetOne(ModelObject, findOptionsCopy, id);
};

//Generated by GetUpdateFunctionWithRelationshipNext13 - Update With Relationship Next 13
export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = (await req.json()) as LockedDeckCardFormUpdatePayload;
  const id = params.id;

  try {
    await LockedDeckCardSchema.validate(res);
  } catch (error: any) {
    return returnJSONResponse({
      status: "error",
      errorCode: 401,
      error: error.message,
    });
  }

  const t = await sequelize.transaction();

  try {
    await updateLockedDeckCard(res, PRIMARY_KEY, t, id);

    t.commit();
    return NextResponse.json({ status: "success" });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  return genericDelete(ModelObject, id);
};
