//Generated by WriteToModelsRouteApi - models route next 13 with SQL
import LockedDeckModel, { LockedDeck } from "@/models/LockedDeckModel";
import { FindOptions, QueryTypes, Transaction } from "sequelize";
import {
  checkDuplicateCombinations,
  getSort,
  parseParams,
  reduceResult,
  removeDuplicates,
  returnJSONResponse,
} from "@/utils/utils";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { Op } from "sequelize";
import {
  LockedDeckDeletePayload,
  LockedDeckFormUpdatePayload,
  LockedDeckFormikShape,
  LockedDeckSearchParams,
  LockedDeckUpdatePayload,
} from "@/interfaces/LockedDeckInterfaces";
import { NextResponse } from "next/server";
import { DEFAULT_LIMIT } from "@/utils/constants";
import {
  COLUMNS,
  DEFAULT_SORT_BY,
  PRIMARY_KEY,
  TABLE_NAME,
  UNIQUE_FIELDS,
} from "@/utils/constants/LockedDeckConstants";
import { LockedDeckSchema } from "@/schema/LockedDeckSchema";
import {
  addCursorFilterToQuery,
  appendFieldsToSQL,
  getColumnKeyByDbName,
  getCursorString,
  getDatabaseFieldName,
  getMappedKeys,
  getSortedValue,
  processFields,
  resetSQL,
} from "@/utils/api/utils";
import clsJoin from "@/utils/clsJoin";
import clsSQL from "@/utils/clsSQL";

//Generated by GetAllRelatedLeftModelImportRoute
//Generated by GetRelatedLeftModelImportRoute - GetRelatedLeftModelImportRoute
import {
  createLockedDeckCard,
  updateLockedDeckCard,
} from "@/utils/api/LockedDeckCardLibs";
import { LockedDeckCardSchema } from "@/schema/LockedDeckCardSchema";
import { PRIMARY_KEY as LOCKEDDECKCARD_PRIMARY_KEY } from "@/utils/constants/LockedDeckCardConstants";
import {
  createLockedDeck,
  deleteLockedDecks,
  updateLockedDeck,
} from "@/utils/api/LockedDeckLibs";

const ModelObject = LockedDeck;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof LockedDeck> = {
  //Generated by GenerateIncludeOption
  include: [],
  //Generated by GenerateAttributesOption
  attributes: [
    //Generated by GetAllModelAttributesBySeqModel
    "id",
    "name",
    "slug",
  ],
};

//Generated by GetGetmodelsqlNext13 - getModelSQL Next 13
function getLockedDeckSQL(
  query: Partial<LockedDeckSearchParams>,
  dontFilter: boolean = false
) {
  const lockedDeckAttributes = getMappedKeys(COLUMNS);

  const simpleOnly = query["simpleOnly"];
  const cursor = query["cursor"];
  const limit = query["limit"] || DEFAULT_LIMIT;

  const sort = getSortedValue(
    query["sort"]
      ? `${query["sort"].includes("-") ? "-" : ""}${getDatabaseFieldName(
          query["sort"],
          COLUMNS
        )}`
      : undefined,
    lockedDeckAttributes,
    DEFAULT_SORT_BY
  );

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;

  //Declare the variables
  const table = TABLE_NAME;
  const fields: ([string, string] | string)[] =
    //Generated by GenerateSQLFieldList
    ["slug", "id", "name"];

  //This will be used to store the fields to be used from the joins
  const joinFields: string[] = [];

  //This will be used to store the replacements needed
  let replacements: Record<string, string> = {};

  const sql = new clsSQL();
  sql.source = table;

  const filters: string[] = [];

  if (!simpleOnly || simpleOnly !== "true") {
    //Generated by GenerateSeqModelFilters
    //Generated by GetLikeFilters
    const q = query.q as string;

    if (q && !dontFilter) {
      const fields: string[] = ["name"];
      replacements["q"] = `*${q}*`;
      filters.push(`MATCH (${fields.join(",")}) AGAINST (:q IN boolean mode)`);
    }
  }

  /* INSERT JOINS HERE */

  //Generated by GetAllSQLLeftJoinSnippets
  //Generated by GetSQLLeftJoinSnippetFromRelationship - GetSQLLeftJoinSnippetFromRelationship
  let {
    sql: lockedDeckCard_SQL,
    fieldAliases: lockedDeckCard_fieldAliases,
    replacements: lockedDeckCard_replacements,
    subqueryAlias: lockedDeckCard_subqueryAlias,
    modelName: lockedDeckCard_modelName,
    filtered: lockedDeckCard_filtered,
  } = getLockedDeckCardSQL(query, dontFilter);

  replacements = { ...replacements, ...lockedDeckCard_replacements };

  lockedDeckCard_fieldAliases.forEach((field) => {
    joinFields.push(`${lockedDeckCard_subqueryAlias}.${field}`);
  });

  const lockedDeckCardJoin = new clsJoin(
    lockedDeckCard_SQL.sql(),
    "id",
    `\`${lockedDeckCard_modelName}.lockedDeckId\``, //`lockedDeckCard.id`
    lockedDeckCard_subqueryAlias, //tempLockedDeckCards
    "INNER"
  );

  if (lockedDeckCard_filtered) {
    sql.joins.push(lockedDeckCardJoin);
  }

  //Count should be pre-cursor
  //This part would return the count SQL
  sql.fields = [`COUNT(DISTINCT ${PRIMARY_KEY}) AS count`];
  if (filters.length > 0) {
    sql.filter = filters.join(" AND ");
  }
  const countSQL = sql.sql();
  sql.filter = "";

  sql.orderBy = getSort(sort, DEFAULT_SORT_BY, PRIMARY_KEY);
  if (cursor) {
    addCursorFilterToQuery(
      cursor,
      sort,
      sortField,
      PRIMARY_KEY,
      replacements,
      filters,
      TABLE_NAME
    );
  }

  if (filters.length > 0) {
    sql.filter = filters.join(" AND ");
  }

  sql.limit = simpleOnly === "true" ? 0 : parseInt(limit);

  //This part will produce the distinct SQL
  sql.fields = [`${TABLE_NAME}.${PRIMARY_KEY}`];
  sql.groupBy = [PRIMARY_KEY];

  const distinctSQL = sql.sql();

  const distinctJoin = new clsJoin(
    distinctSQL,
    PRIMARY_KEY,
    PRIMARY_KEY,
    "tempDistinct",
    "INNER"
  );

  sql.fields = [];

  //build the sql field name and aliases (aliases are used to destructure the object)
  appendFieldsToSQL(fields, sql, table);

  sql.fields = sql.fields.concat(joinFields);

  /* Insert Join Cancellations here..*/

  //Generated by GetAllLeftModelJoinCancellationSnippet
  //Generated by GetLeftModelJoinCancellationSnippet - GetLeftModelJoinCancellationSnippet
  lockedDeckCard_SQL = getLockedDeckCardSQL(query, true).sql;
  lockedDeckCardJoin.source = lockedDeckCard_SQL.sql();
  lockedDeckCardJoin.joinType = "LEFT";

  //Insert joins here LEFT joins e.g. cardCardKeywordJoin, distincJoin or
  //new clsJoin("marvelduel_belongsto", "deck_id", "id", null)
  sql.joins = [
    distinctJoin,

    //Generated by GetAllLeftJoinName
    lockedDeckCardJoin, //Generated by GetLeftJoinName - GetLeftJoinName
  ];
  resetSQL(sql);

  const sqlString: string = sql.sql();

  return {
    sqlString,
    countSQL,
    replacements,
  };
}

//Generated by GetAllGetmodelsqlLeftModelChildNext13
//Generated by GetGetmodelsqlLeftModelChildNext13 - GetGetmodelsqlLeftModelChildNext13
function getLockedDeckCardSQL(
  query: Partial<LockedDeckSearchParams>,
  dontFilter: boolean = false
) {
  const table = "lockeddeckcards";
  const fields: (string | [string, string])[] =
    //Generated by GenerateSQLFieldList
    ["id", "lockedDeckId", "cardId"];
  const fieldAliases: string[] = [];
  const modelName = "LockedDeckCard";
  let filtered = false;
  let replacements: Record<string, string> = {};

  let sql = new clsSQL();
  sql.source = table;

  //build the sql field name and aliases (aliases are used to destructure the object)
  processFields(fields, modelName, table, fieldAliases, sql);

  const filters: string[] = [];

  //Generated by GenerateSeqModelFilters

  /*INSERT JOINS HERE*/

  if (filters.length > 0) {
    filtered = true;
    sql.filter = filters.join(" AND ");
  }

  return {
    sql,
    fieldAliases,
    replacements,
    subqueryAlias: "tempLockedDeckCard",
    modelName,
    filtered,
  };
}

//Generated by GetSqlModelsGetRoute - GET Models route
export const GET = async (req: Request) => {
  const searchParams = new URL(req.url).searchParams;
  const query = parseParams(searchParams) as Partial<LockedDeckSearchParams>;

  const lockedDeckAttributes = getMappedKeys(COLUMNS);

  const fetchCount = query["fetchCount"] === "true";
  const sort = getSortedValue(
    query["sort"]
      ? `${query["sort"].includes("-") ? "-" : ""}${getDatabaseFieldName(
          query["sort"],
          COLUMNS
        )}`
      : undefined,
    lockedDeckAttributes,
    DEFAULT_SORT_BY
  );

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;
  const cursorField = getColumnKeyByDbName(sortField, COLUMNS);

  let { sqlString, countSQL, replacements } = getLockedDeckSQL(query);

  let recordCount;
  if (fetchCount) {
    const countResult: any = await sequelize.query(countSQL, {
      replacements,
      type: QueryTypes.SELECT,
    });

    recordCount = countResult[0].count;
  }

  let data: LockedDeckModel[] = await sequelize.query(sqlString, {
    replacements,
    type: QueryTypes.SELECT,
    nest: true,
  });

  let cursor = "";

  if (data && data.length > 0) {
    cursor = getCursorString(cursorField, PRIMARY_KEY, data);
  }

  //Add any object that will be turned into an array
  //e.g. const result = reduceResult(result as any, [["CardCardKeyword", "CardCardKeywords"],]);

  //Remove duplicating CardUnityCards
  //removeDuplicates(result as any, "CardUnityCards", "id");

  //Generated by GetAllLeftModelReduceResultAndRemoveDuplicates
  //Generated by GetLeftModelReduceResultAndRemoveDuplicates - GetLeftModelReduceResultAndRemoveDuplicates
  data = reduceResult(data as any, [
    ["LockedDeckCard", "LockedDeckCards"],
  ]) as unknown as LockedDeckModel[];

  removeDuplicates(data as any, "LockedDeckCards", "id");

  return NextResponse.json({
    rows: data,
    cursor,
    ...(fetchCount && { count: recordCount }),
  });
};

//Generated by GetSingleCreateModelPOSTRoute - GetSingleCreateModelPOSTRoute
export const POST = async (req: Request) => {
  const res = (await req.json()) as LockedDeckFormUpdatePayload;

  try {
    await LockedDeckSchema.validate(res);
  } catch (error) {
    return handleSequelizeError(error);
  }

  //Generated by GetAllRelatedPluralizedModelName
  const { LockedDeckCards } = res;
  const t = await sequelize.transaction();

  try {
    const newLockedDeck = await createLockedDeck(res, t);
    const id = newLockedDeck[PRIMARY_KEY];

    //Generated by GetAllRelatedModelUpdateOrInsert
    //Generated by GetRelatedModelUpdateOrInsert - GetRelatedModelUpdateOrInsert
    const createdLockedDeckCards: { index: number; id: number }[] = [];
    if (LockedDeckCards) {
      for (const item of LockedDeckCards) {
        item.lockedDeckId = id;
        await LockedDeckCardSchema.validate(item);

        if (item.id === "") {
          const lockedDeckCard = await createLockedDeckCard(item, t);

          createdLockedDeckCards.push({
            index: item.index,
            id: lockedDeckCard[LOCKEDDECKCARD_PRIMARY_KEY],
          });
        } else {
          await updateLockedDeckCard(item, LOCKEDDECKCARD_PRIMARY_KEY, t);
        }
      }
    }

    await t.commit();

    return NextResponse.json({
      status: "success",
      id,
      slug: newLockedDeck.slug,

      //Generated by GetAllRelatedModelKeyValue
      LockedDeckCards: createdLockedDeckCards, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (req: Request) => {
  const body = (await req.json()) as LockedDeckDeletePayload;
  const { deletedLockedDecks } = body;

  if (deletedLockedDecks.length > 0) {
    const t = await sequelize.transaction();
    try {
      await deleteLockedDecks(PRIMARY_KEY, deletedLockedDecks, t);
      t.commit();
      return NextResponse.json("success");
    } catch (error) {
      t.rollback();
      return handleSequelizeError(error);
    }
  }
};
