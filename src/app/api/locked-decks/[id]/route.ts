//Generated by Generate_getModelAPIRouteNext13 - getModel API Route Next 13
import { LockedDeck } from "@/models/LockedDeckModel";
import { FindOptions, Sequelize } from "sequelize";
import { cloneDeep } from "lodash";
import { genericDelete, genericGetOneBySlug } from "@/utils/generic";
import { LockedDeckFormUpdatePayload } from "@/interfaces/LockedDeckInterfaces";
import { LockedDeckSchema } from "@/schema/LockedDeckSchema";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { returnJSONResponse, validateRequiredFields } from "@/utils/utils";
import { Op } from "sequelize";
import { updateLockedDeck } from "@/utils/api/LockedDeckLibs";
import { NextResponse } from "next/server";
import { PRIMARY_KEY } from "@/utils/constants/LockedDeckConstants";
//Generated by GetAllAPIRelatedLeftModelImportBySeqModel
//Generated by GetAPIRelatedLeftModelImport - GetAPIRelatedLeftModelImport
import { LockedDeckCard } from "@/models/LockedDeckCardModel";
import { LockedDeckCardModel } from "@/interfaces/LockedDeckCardInterfaces";
import { LockedDeckCardSchema } from "@/schema/LockedDeckCardSchema";
import { PRIMARY_KEY as LOCKEDDECKCARD_PRIMARY_KEY } from "@/utils/constants/LockedDeckCardConstants";
import {
  createLockedDeckCard,
  deleteLockedDeckCards,
  updateLockedDeckCard,
} from "@/utils/api/LockedDeckCardLibs";

const ModelObject = LockedDeck;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof LockedDeck> = {
  //Generated by GenerateIncludeOption

  include: [
    {
      model: LockedDeckCard,
      //Generated by GenerateAttributesOption

      attributes: ["id", "lockedDeckId", "cardId"],
    },
  ],
  //Generated by GenerateAttributesOption

  attributes: ["id", "name", "slug"],
};

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof LockedDeck> =
    cloneDeep(findOptions);

  const id = params.id;
  return genericGetOneBySlug(ModelObject, findOptionsCopy, id);
};

//Generated by GetUpdateFunctionWithRelationshipNext13 - Update With Relationship Next 13
export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = (await req.json()) as LockedDeckFormUpdatePayload;
  const id = params.id;

  try {
    await LockedDeckSchema.validate(res);
  } catch (error: any) {
    return returnJSONResponse({
      status: "error",
      errorCode: 401,
      error: error.message,
    });
  }

  //Generated by GetAllRelatedPluralizedModelName
  const { LockedDeckCards } = res;

  const t = await sequelize.transaction();

  try {
    await updateLockedDeck(res, PRIMARY_KEY, t, id);

    //Generated by GetAllRelatedModelUpdateOrInsert
    //Generated by GetRelatedModelUpdateOrInsert - GetRelatedModelUpdateOrInsert
    const createdLockedDeckCards: { index: number; id: number }[] = [];
    if (LockedDeckCards) {
      for (const item of LockedDeckCards) {
        item.lockedDeckId = id;
        await LockedDeckCardSchema.validate(item);

        if (item[LOCKEDDECKCARD_PRIMARY_KEY] === "") {
          const lockedDeckCard = await createLockedDeckCard(item, t);

          createdLockedDeckCards.push({
            index: item.index,
            id: lockedDeckCard[LOCKEDDECKCARD_PRIMARY_KEY],
          });
        } else {
          await updateLockedDeckCard(item, LOCKEDDECKCARD_PRIMARY_KEY, t);
        }
      }
    }

    t.commit();
    return NextResponse.json({
      status: "success",
      //Generated by GetAllRelatedModelKeyValue
      LockedDeckCards: createdLockedDeckCards, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
    });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  return genericDelete(ModelObject, id);
};
