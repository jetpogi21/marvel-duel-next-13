//Generated by WriteToModelsRouteApi - models route next 13
import { CardUnity } from "@/models/CardUnityModel";
import { FindOptions, Transaction } from "sequelize";
import { cloneDeep } from "lodash";
import {
  checkDuplicateCombinations,
  formatSortAsSequelize,
  getSort,
  parseParams,
  returnJSONResponse,
} from "@/utils/utils";
import { genericGetAll } from "@/utils/generic";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { Op } from "sequelize";
import {
  CardUnityDeletePayload,
  CardUnityFormUpdatePayload,
  CardUnityFormikShape,
  CardUnitySearchParams,
  CardUnityUpdatePayload,
} from "@/interfaces/CardUnityInterfaces";
import { NextResponse } from "next/server";
import { DEFAULT_LIMIT } from "@/utils/constants";
import {
  DEFAULT_SORT_BY,
  PRIMARY_KEY,
  REQUIRED_FIELDS,
  UNIQUE_FIELDS,
} from "@/utils/constants/CardUnityConstants";
import { CardUnitySchema } from "@/schema/CardUnitySchema";
import { appendAndFilters, getCursor } from "@/utils/api/utils";
import {
  createCardUnity,
  deleteCardUnities,
  updateCardUnity,
} from "@/utils/api/CardUnityLibs";

//Generated by GetAllRelatedLeftModelImportRoute
//Generated by GetRelatedLeftModelImportRoute - GetRelatedLeftModelImportRoute
import {
  createCardUnityCard,
  updateCardUnityCard,
} from "@/utils/api/CardUnityCardLibs";
import { CardUnityCardSchema } from "@/schema/CardUnityCardSchema";
import { PRIMARY_KEY as CARDUNITYCARD_PRIMARY_KEY } from "@/utils/constants/CardUnityCardConstants";

const ModelObject = CardUnity;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof CardUnity> = {
  //Generated by GenerateIncludeOption
  include: [],
  //Generated by GenerateAttributesOption
  attributes: [
    //Generated by GetAllModelAttributesBySeqModel
    "id",
    "cardCompositions",
    "createdAt",
    "updatedAt",
  ],
};

//Generated by Generate_getModelsSimpleFilterNext13
export const GET = async (req: Request) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof CardUnity> = cloneDeep(findOptions);
  const cardUnityAttributes = Object.keys(CardUnity.getAttributes()).map(
    (attribute) => attribute
  );

  const searchParams = new URL(req.url).searchParams;

  const query = parseParams(searchParams) as Partial<CardUnitySearchParams>;
  const primaryKey = PRIMARY_KEY;

  const simpleOnly = query["simpleOnly"];
  const cursor = query["cursor"];
  const fetchCount = query["fetchCount"] === "true";

  let limit = query["limit"];
  const sort = query["sort"]
    ? cardUnityAttributes.includes(query["sort"]) ||
      cardUnityAttributes.includes(query["sort"].substring(1))
      ? query["sort"]
      : DEFAULT_SORT_BY
    : DEFAULT_SORT_BY;

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;

  if (!simpleOnly) {
    const where: Record<string | symbol, unknown> = { [Op.and]: [] };
    const andFilters = [];

    //@ts-ignore
    const q = query["q"];

    if (q) {
      andFilters.push({
        [Op.or]: [
          //Generated by GetAllQFilterFieldBySeqModel
        ],
      });
    }

    //Generated by GetAllBackendFiltersBySeqModel

    //get all the count here first
    let recordCount = 0;
    if (fetchCount) {
      recordCount = await CardUnity.count({
        where: { [Op.and]: andFilters },
      });
    }

    if (cursor) {
      appendAndFilters(andFilters, sort, sortField, primaryKey, cursor);
    }

    where[Op.and] = andFilters;
    findOptionsCopy.where = where;
    limit = limit || DEFAULT_LIMIT;
    findOptionsCopy.limit = parseInt(limit);

    //@ts-ignore
    findOptionsCopy.order = formatSortAsSequelize(
      getSort(sort, DEFAULT_SORT_BY, primaryKey)
    );

    try {
      const data = await CardUnity.findAll(findOptionsCopy);

      const cursor = getCursor(data, sortField, primaryKey);

      return NextResponse.json({
        rows: data,
        cursor,
        ...(fetchCount && { count: recordCount }),
      });
    } catch (err) {
      return handleSequelizeError(err);
    }
  } else {
    return genericGetAll(ModelObject, findOptionsCopy);
  }
};

//Generated by GetSingleCreateModelPOSTRoute - GetSingleCreateModelPOSTRoute
export const POST = async (req: Request) => {
  const res = (await req.json()) as CardUnityFormUpdatePayload;

  try {
    await CardUnitySchema.validate(res);
  } catch (error) {
    return handleSequelizeError(error);
  }

  //Generated by GetAllRelatedPluralizedModelName
  const { CardUnityCards } = res;
  const t = await sequelize.transaction();

  try {
    const newCardUnity = await createCardUnity(res, t);
    const id = newCardUnity[PRIMARY_KEY];

    //Generated by GetAllRelatedModelUpdateOrInsert
    //Generated by GetRelatedModelUpdateOrInsert - GetRelatedModelUpdateOrInsert
    const createdCardUnityCards: { index: number; id: number }[] = [];
    if (CardUnityCards) {
      for (const item of CardUnityCards) {
        item.CardUnityId = id;
        await CardUnityCardSchema.validate(item);

        if (item[CARDUNITYCARD_PRIMARY_KEY] === "") {
          const cardUnityCard = await createCardUnityCard(item, t);

          createdCardUnityCards.push({
            index: item.index,
            id: cardUnityCard[CARDUNITYCARD_PRIMARY_KEY],
          });
        } else {
          await updateCardUnityCard(item, CARDUNITYCARD_PRIMARY_KEY, t);
        }
      }
    }

    await t.commit();

    return NextResponse.json({
      status: "success",
      id,

      //Generated by GetAllRelatedModelKeyValue
      CardUnityCards: createdCardUnityCards, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (req: Request) => {
  const body = (await req.json()) as CardUnityDeletePayload;
  const { deletedCardUnities } = body;

  if (deletedCardUnities.length > 0) {
    const t = await sequelize.transaction();
    try {
      await deleteCardUnities(PRIMARY_KEY, deletedCardUnities, t);
      t.commit();
      return NextResponse.json({
        status: "success",
        recordsDeleted: deletedCardUnities.length,
      });
    } catch (error) {
      t.rollback();
      return handleSequelizeError(error);
    }
  }
};
