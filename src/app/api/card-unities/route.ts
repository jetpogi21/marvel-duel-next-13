//Generated by WriteToModelsRouteApi - models route next 13 with SQL
import CardUnityModel, { CardUnity } from "@/models/CardUnityModel";
import { FindOptions, QueryTypes, Transaction } from "sequelize";
import {
  checkDuplicateCombinations,
  getSort,
  parseParams,
  reduceResult,
  removeDuplicates,
  returnJSONResponse,
} from "@/utils/utils";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { Op } from "sequelize";
import {
  CardUnityDeletePayload,
  CardUnityFormUpdatePayload,
  CardUnityFormikShape,
  CardUnitySearchParams,
  CardUnityUpdatePayload,
} from "@/interfaces/CardUnityInterfaces";
import { NextResponse } from "next/server";
import { DEFAULT_LIMIT } from "@/utils/constants";
import {
  COLUMNS,
  DEFAULT_SORT_BY,
  PRIMARY_KEY,
  TABLE_NAME,
  UNIQUE_FIELDS,
} from "@/utils/constants/CardUnityConstants";
import { CardUnitySchema } from "@/schema/CardUnitySchema";
import {
  addCursorFilterToQuery,
  appendFieldsToSQL,
  getColumnKeyByDbName,
  getCursorString,
  getDatabaseFieldName,
  getMappedKeys,
  getSortedValue,
  processFields,
  resetSQL,
} from "@/utils/api/utils";
import clsJoin from "@/utils/clsJoin";
import clsSQL from "@/utils/clsSQL";

//Generated by GetAllRelatedLeftModelImportRoute
//Generated by GetRelatedLeftModelImportRoute - GetRelatedLeftModelImportRoute
import {
  createCardUnityCard,
  updateCardUnityCard,
} from "@/utils/api/CardUnityCardLibs";
import { CardUnityCardSchema } from "@/schema/CardUnityCardSchema";
import { PRIMARY_KEY as CARDUNITYCARD_PRIMARY_KEY } from "@/utils/constants/CardUnityCardConstants";
import {
  createCardUnity,
  deleteCardUnities,
  updateCardUnity,
} from "@/utils/api/CardUnityLibs";

const ModelObject = CardUnity;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof CardUnity> = {
  //Generated by GenerateIncludeOption
  include: [],
  //Generated by GenerateAttributesOption
  attributes: [
    //Generated by GetAllModelAttributesBySeqModel
    "id",
    "cardCompositions",
    "createdAt",
    "updatedAt",
  ],
};

//Generated by GetGetmodelsqlNext13 - getModelSQL Next 13
function getCardUnitySQL(
  query: Partial<CardUnitySearchParams>,
  dontFilter: boolean = false
) {
  const cardUnityAttributes = getMappedKeys(COLUMNS);

  const simpleOnly = query["simpleOnly"];
  const cursor = query["cursor"];
  const limit = query["limit"] || DEFAULT_LIMIT;

  const sort = getSortedValue(
    query["sort"]
      ? `${query["sort"].includes("-") ? "-" : ""}${getDatabaseFieldName(
          query["sort"],
          COLUMNS
        )}`
      : undefined,
    cardUnityAttributes,
    DEFAULT_SORT_BY
  );

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;

  //Declare the variables
  const table = TABLE_NAME;
  const fields: ([string, string] | string)[] =
    //Generated by GenerateSQLFieldList
    ["id", "cardCompositions"];

  //This will be used to store the fields to be used from the joins
  const joinFields: string[] = [];

  //This will be used to store the replacements needed
  let replacements: Record<string, string> = {};

  const sql = new clsSQL();
  sql.source = table;

  const filters: string[] = [];

  if (!simpleOnly || simpleOnly !== "true") {
  }

  /* INSERT JOINS HERE */

  //Generated by GetAllSQLLeftJoinSnippets
  //Generated by GetSQLLeftJoinSnippetFromRelationship - GetSQLLeftJoinSnippetFromRelationship
  let {
    sql: cardUnityCard_SQL,
    fieldAliases: cardUnityCard_fieldAliases,
    replacements: cardUnityCard_replacements,
    subqueryAlias: cardUnityCard_subqueryAlias,
    modelName: cardUnityCard_modelName,
    filtered: cardUnityCard_filtered,
  } = getCardUnityCardSQL(query, dontFilter);

  replacements = { ...replacements, ...cardUnityCard_replacements };

  cardUnityCard_fieldAliases.forEach((field) => {
    joinFields.push(`${cardUnityCard_subqueryAlias}.${field}`);
  });

  const cardUnityCardJoin = new clsJoin(
    cardUnityCard_SQL.sql(),
    "id",
    `\`${cardUnityCard_modelName}.CardUnityId\``, //`cardUnityCard.id`
    cardUnityCard_subqueryAlias, //tempCardUnityCards
    "INNER"
  );

  if (cardUnityCard_filtered) {
    sql.joins.push(cardUnityCardJoin);
  }

  //Count should be pre-cursor
  //This part would return the count SQL
  sql.fields = [`COUNT(DISTINCT ${TABLE_NAME}.${PRIMARY_KEY}) AS count`];
  if (filters.length > 0) {
    sql.filter = filters.join(" AND ");
  }
  const countSQL = sql.sql();
  sql.filter = "";

  sql.orderBy = getSort(sort, DEFAULT_SORT_BY, PRIMARY_KEY);
  if (cursor) {
    addCursorFilterToQuery(
      cursor,
      sort,
      sortField,
      PRIMARY_KEY,
      replacements,
      filters,
      TABLE_NAME
    );
  }

  if (filters.length > 0) {
    sql.filter = filters.join(" AND ");
  }

  sql.limit = simpleOnly === "true" ? 0 : parseInt(limit);

  //This part will produce the distinct SQL
  sql.fields = [`${TABLE_NAME}.${PRIMARY_KEY}`];
  sql.groupBy = [PRIMARY_KEY];

  const distinctSQL = sql.sql();

  const distinctJoin = new clsJoin(
    distinctSQL,
    PRIMARY_KEY,
    PRIMARY_KEY,
    "tempDistinct",
    "INNER"
  );

  sql.fields = [];

  //build the sql field name and aliases (aliases are used to destructure the object)
  appendFieldsToSQL(fields, sql, table);

  sql.fields = sql.fields.concat(joinFields);

  /* Insert Join Cancellations here..*/

  //Generated by GetAllLeftModelJoinCancellationSnippet
  //Generated by GetLeftModelJoinCancellationSnippet - GetLeftModelJoinCancellationSnippet
  cardUnityCard_SQL = getCardUnityCardSQL(query, true).sql;
  cardUnityCardJoin.source = cardUnityCard_SQL.sql();
  cardUnityCardJoin.joinType = "LEFT";

  //Insert joins here LEFT joins e.g. cardCardKeywordJoin, distincJoin or
  //new clsJoin("marvelduel_belongsto", "deck_id", "id", null)
  sql.joins = [
    distinctJoin,

    //Generated by GetAllLeftJoinName
    cardUnityCardJoin, //Generated by GetLeftJoinName - GetLeftJoinName
  ];
  resetSQL(sql);

  const sqlString: string = sql.sql();

  return {
    sqlString,
    countSQL,
    replacements,
  };
}

//Generated by GetAllGetmodelsqlLeftModelChildNext13
//Generated by GetGetmodelsqlLeftModelChildNext13 - GetGetmodelsqlLeftModelChildNext13
function getCardUnityCardSQL(
  query: Partial<CardUnitySearchParams>,
  dontFilter: boolean = false
) {
  const table = "cardunitycards";
  const fields: (string | [string, string])[] =
    //Generated by GenerateSQLFieldList
    ["id", "description", "CardUnityId", "CardId"];
  const fieldAliases: string[] = [];
  const modelName = "CardUnityCard";
  let filtered = false;
  let replacements: Record<string, string> = {};

  let sql = new clsSQL();
  sql.source = table;

  //build the sql field name and aliases (aliases are used to destructure the object)
  processFields(fields, modelName, table, fieldAliases, sql);

  const filters: string[] = [];

  //Generated by GenerateSeqModelFilters
  //Generated by GetLikeFilters - LIKE Template
  const q = query.q as string;

  if (q && !dontFilter) {
    const fields: string[] = ["description"];
    replacements["q"] = `%${q}%`;
    filters.push(
      `(${fields.map((field) => `(${table}.${field} LIKE :q)`).join(" OR ")})`
    );
  }

  //Generated by GenerateModelFilterSnippet
  //Generated by GetSingleFilter - Single Filter
  const card = query.card as string;

  if (card && !dontFilter) {
    filters.push(`${table}.CardId = :card`);
    replacements["card"] = card;
  }

  /*INSERT JOINS HERE*/

  if (filters.length > 0) {
    filtered = true;
    sql.filter = filters.join(" AND ");
  }

  return {
    sql,
    fieldAliases,
    replacements,
    subqueryAlias: "tempCardUnityCard",
    modelName,
    filtered,
  };
}

//Generated by GetSqlModelsGetRoute - GET Models route
export const GET = async (req: Request) => {
  const searchParams = new URL(req.url).searchParams;
  const query = parseParams(searchParams) as Partial<CardUnitySearchParams>;

  const cardUnityAttributes = getMappedKeys(COLUMNS);

  const fetchCount = query["fetchCount"] === "true";
  const sort = getSortedValue(
    query["sort"]
      ? `${query["sort"].includes("-") ? "-" : ""}${getDatabaseFieldName(
          query["sort"],
          COLUMNS
        )}`
      : undefined,
    cardUnityAttributes,
    DEFAULT_SORT_BY
  );

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;
  const cursorField = getColumnKeyByDbName(sortField, COLUMNS);

  let { sqlString, countSQL, replacements } = getCardUnitySQL(query);

  let recordCount;
  if (fetchCount) {
    const countResult: any = await sequelize.query(countSQL, {
      replacements,
      type: QueryTypes.SELECT,
    });

    recordCount = countResult[0].count;
  }

  let data: CardUnityModel[] = await sequelize.query(sqlString, {
    replacements,
    type: QueryTypes.SELECT,
    nest: true,
  });

  let cursor = "";

  if (data && data.length > 0) {
    cursor = getCursorString(cursorField, PRIMARY_KEY, data);
  }

  //Add any object that will be turned into an array
  //e.g. const result = reduceResult(result as any, [["CardCardKeyword", "CardCardKeywords"],]);
  data = reduceResult(data as any, [
    //Generated by GetAllLeftModelsToReduce
    ["CardUnityCard", "CardUnityCards"], //Generated by GetLeftModelToReduce - GetLeftModelToReduce
  ]) as unknown as CardUnityModel[];

  //Generated by GetAllLeftModelReduceResultAndRemoveDuplicates
  //Generated by GetLeftModelReduceResultAndRemoveDuplicates - GetLeftModelReduceResultAndRemoveDuplicates
  removeDuplicates(data as any, "CardUnityCards", "id");

  return NextResponse.json({
    rows: data,
    cursor,
    ...(fetchCount && { count: recordCount }),
  });
};

//Generated by GetSingleCreateModelPOSTRoute - GetSingleCreateModelPOSTRoute
export const POST = async (req: Request) => {
  const res = (await req.json()) as CardUnityFormUpdatePayload;

  try {
    await CardUnitySchema.validate(res);
  } catch (error) {
    return handleSequelizeError(error);
  }

  //Generated by GetAllRelatedPluralizedModelName
  const { CardUnityCards } = res;
  const t = await sequelize.transaction();

  try {
    const newCardUnity = await createCardUnity(res, t);
    const id = newCardUnity[PRIMARY_KEY];

    //Generated by GetAllRelatedModelUpdateOrInsert
    //Generated by GetRelatedModelUpdateOrInsert - GetRelatedModelUpdateOrInsert
    const createdCardUnityCards: { index: number; id: number }[] = [];
    if (CardUnityCards) {
      for (const item of CardUnityCards) {
        item.CardUnityId = id;
        await CardUnityCardSchema.validate(item);

        if (item[CARDUNITYCARD_PRIMARY_KEY] === "") {
          const cardUnityCard = await createCardUnityCard(item, t);

          createdCardUnityCards.push({
            index: item.index,
            id: cardUnityCard[CARDUNITYCARD_PRIMARY_KEY],
          });
        } else {
          await updateCardUnityCard(item, CARDUNITYCARD_PRIMARY_KEY, t);
        }
      }
    }

    await t.commit();

    return NextResponse.json({
      status: "success",
      id,

      //Generated by GetAllRelatedModelKeyValue
      CardUnityCards: createdCardUnityCards, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (req: Request) => {
  const body = (await req.json()) as CardUnityDeletePayload;
  const { deletedCardUnities } = body;

  if (deletedCardUnities.length > 0) {
    const t = await sequelize.transaction();
    try {
      await deleteCardUnities(PRIMARY_KEY, deletedCardUnities, t);
      t.commit();
      return NextResponse.json("success");
    } catch (error) {
      t.rollback();
      return handleSequelizeError(error);
    }
  }
};
