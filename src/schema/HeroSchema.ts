//Generated by WriteToModelschema_ts - ModelSchema.ts
import * as Yup from "yup";

const HeroSchema = Yup.object().shape({
  //Generated by GetAllFieldValidationBySeqModel
  heroName: Yup.string().required("Hero Name is a required field."),
  //Generated by GetAllRelatedLeftArrayValidation
  //Generated by GetRelatedLeftArrayValidation - GetRelatedLeftArrayValidation
  HeroSkills: Yup.array().of(
    Yup.object().shape({
      //Generated by GetAllArrayFieldValidationBySeqModel
      name: Yup.string().when("touched", ([touched], schema) =>
        touched
          ? schema.required("Name is a required field.")
          : schema.notRequired()
      ),
      type: Yup.string().when("touched", ([touched], schema) =>
        touched
          ? schema
              .required("Type is a required field.")
              .oneOf(["Active", "Passive"], "Type is invalid")
          : schema.notRequired()
      ),
      cost: Yup.number().nullable(),
      description: Yup.string().when("touched", ([touched], schema) =>
        touched
          ? schema.required("Description is a required field.")
          : schema.notRequired()
      ),
    })
  ),
});

const HeroArraySchema = Yup.object().shape({
  Heroes: Yup.array().of(
    Yup.object().shape({
      //Generated by GetAllArrayFieldValidationBySeqModel
      heroName: Yup.string().when("touched", ([touched], schema) =>
        touched
          ? schema.required("Hero Name is a required field.")
          : schema.notRequired()
      ),
    })
  ),
});

export { HeroSchema, HeroArraySchema };
